# Indices settings
Indices:
  - index_name: participants
    type: neo4j
    mapping:
      participant_id:
        type: keyword
      race:
        type: keyword
      gender:
        type: keyword
      ethnicity:
        type: keyword
      alternate_participant_id:
        type: keyword
      study_id:
        type: keyword
      phs_accession:
        type: keyword
      study_acronym:
        type: keyword
      study_short_title:
        type: keyword
      age_at_diagnosis:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      cmf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      cmfST_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      maf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      pf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      rf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      scsf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      sf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      nested_filters:
        type: nested
        properties:
          age_at_diagnosis:
            type: integer
          diagnosis_anatomic_site:
            type: keyword
          disease_phase:
            type: keyword
          diagnosis_icd_o:
            type: keyword
          vital_status:
            type: keyword
          sample_anatomic_site:
            type: keyword
          participant_age_at_collection:
            type: integer
          sample_tumor_status:
            type: keyword
          tumor_classification:
            type: keyword
          clinical_measure_file:
            type: boolean
          methylation_array_file:
            type: boolean
          pathology_file:
            type: boolean
          radiology_file:
            type: boolean
          single_cell_sequencing_file:
            type: boolean
          sequencing_file:
            type: boolean
          file_type:
            type: text
            fields:
              keyword:
                type: keyword
                ignore_above: 256
          grant_id:
            type: keyword
          institution:
            type: keyword
          library_selection:
            type: keyword
          library_source:
            type: keyword
          library_strategy:
            type: keyword
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
        MATCH (p:participant)
        OPTIONAL MATCH (p)<-[:of_diagnosis]-(dg:diagnosis)
        OPTIONAL MATCH (p)<-[:of_follow_up]-(fu:follow_up)
        OPTIONAL MATCH (p)<-[:of_sample]-(sm:sample)
        OPTIONAL MATCH (st:study)<-[:of_participant]-(p)
        OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
        OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
        OPTIONAL MATCH (p)-[:of_clinical_measure_file_participant]-(cmf:clinical_measure_file)
        OPTIONAL MATCH (sm)<-[:of_methylation_array_file]-(maf:methylation_array_file)
        OPTIONAL MATCH (sm)<-[:of_pathology_file]-(pf:pathology_file)
        OPTIONAL MATCH (p)<-[:of_radiology_file]-(rf:radiology_file)
        OPTIONAL MATCH (sm)<-[:of_single_cell_sequencing_file]-(scsf:single_cell_sequencing_file)
        OPTIONAL MATCH (sm)<-[:of_sequencing_file]-(sf:sequencing_file)
        WITH [cmf.file_type, maf.file_type, pf.file_type, rf.file_type, scsf.file_type, sf.file_type] as file_types, rf, scsf, pf, maf, cmf, fu, p, st, sf,sm,stf,stp, dg
        RETURN DISTINCT
          p.participant_id as participant_id,
          p.race as race,
          p.gender as gender,
          p.ethnicity as ethnicity,
          p.alternate_participant_id as alternate_participant_id,
          st.study_id as study_id,
          st.phs_accession as phs_accession,
          st.study_acronym as study_acronym,
          st.study_short_title as study_short_title,
          COLLECT(DISTINCT dg.age_at_diagnosis) as age_at_diagnosis,
          COLLECT(DISTINCT cmf.dcf_indexd_guid) as cmf_uuid,
          [] as cmfST_uuid,
          COLLECT(DISTINCT maf.dcf_indexd_guid) as maf_uuid,
          COLLECT(DISTINCT pf.dcf_indexd_guid) as pf_uuid,
          COLLECT(DISTINCT rf.dcf_indexd_guid) as rf_uuid,
          COLLECT(DISTINCT scsf.dcf_indexd_guid) as scsf_uuid,
          COLLECT(DISTINCT sf.dcf_indexd_guid) as sf_uuid,
          COLLECT(DISTINCT {
              age_at_diagnosis: dg.age_at_diagnosis,
              diagnosis_anatomic_site: dg.anatomic_site,
              disease_phase: dg.disease_phase,
              diagnosis_icd_o: dg.diagnosis_icd_o,
              vital_status: fu.vital_status,
              sample_anatomic_site: sm.anatomic_site,
              participant_age_at_collection: sm.participant_age_at_collection,
              sample_tumor_status: sm.sample_tumor_status,
              tumor_classification: sm.tumor_classification,
              clinical_measure_file: exists((p)<-[:of_clinical_measure_file_participant]-(cmf)),
              methylation_array_file: exists((p)<-[:of_sample]-(sm)<-[:of_methylation_array_file]-(maf)),
              pathology_file: exists((p)<-[:of_sample]-(sm)<-[:of_pathology_file]-(pf)),
              radiology_file: exists((p)<-[:of_radiology_file]-(rf)),
              single_cell_sequencing_file: exists((p)<-[:of_sample]-(sm)<-[:of_single_cell_sequencing_file]-(scsf)),
              sequencing_file: exists((p)<-[:of_sample]-(sm)<-[:of_sequencing_file]-(sf)),
              file_type: [ft in file_types where ft is not null],
              grant_id: stf.grant_id,
              institution: stp.institution,
              library_selection: sf.library_selection,
              library_source: sf.library_source,
              library_strategy: sf.library_strategy
          }) AS nested_filters
      "

  - index_name: diagnosis
    type: neo4j
    mapping:
      diagnosis_id:
        type: keyword
      participant_id:
        type: keyword
      diagnosis_icd_o:
        type: keyword
      disease_phase:
        type: keyword
      diagnosis_anatomic_site:
        type: keyword
      age_at_diagnosis:
        type: integer
      race:
        type: keyword
      gender:
        type: keyword
      ethnicity:
        type: keyword
      phs_accession:
        type: keyword
      study_acronym:
        type: keyword
      study_short_title:
        type: keyword
      nested_filters:
        type: nested
        properties:
          vital_status:
            type: keyword
          sample_anatomic_site:
            type: keyword
          participant_age_at_collection:
            type: integer
          sample_tumor_status:
            type: keyword
          tumor_classification:
            type: keyword
          clinical_measure_file:
            type: boolean
          methylation_array_file:
            type: boolean
          pathology_file:
            type: boolean
          radiology_file:
            type: boolean
          single_cell_sequencing_file:
            type: boolean
          sequencing_file:
            type: boolean
          file_type:
            type: text
            fields:
              keyword:
                type: keyword
                ignore_above: 256
          grant_id:
            type: keyword
          institution:
            type: keyword
          library_selection:
            type: keyword
          library_source:
            type: keyword
          library_strategy:
            type: keyword
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
        MATCH (dg:diagnosis)
        OPTIONAL MATCH (p:participant)<-[:of_diagnosis]-(dg)
        OPTIONAL MATCH (p)<-[:of_follow_up]-(fu:follow_up)
        OPTIONAL MATCH (p)<-[:of_sample]-(sm:sample)
        OPTIONAL MATCH (st:study)<-[:of_participant]-(p)
        OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
        OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
        OPTIONAL MATCH (p)-[:of_clinical_measure_file_participant]-(cmf:clinical_measure_file)
        OPTIONAL MATCH (st)<-[:of_clinical_measure_file]-(cmfST:clinical_measure_file)
        OPTIONAL MATCH (sm)<-[:of_methylation_array_file]-(maf:methylation_array_file)
        OPTIONAL MATCH (sm)<-[:of_pathology_file]-(pf:pathology_file)
        OPTIONAL MATCH (p)<-[:of_radiology_file]-(rf:radiology_file)
        OPTIONAL MATCH (sm)<-[:of_single_cell_sequencing_file]-(scsf:single_cell_sequencing_file)
        OPTIONAL MATCH (sm)<-[:of_sequencing_file]-(sf:sequencing_file)
        WITH [cmf.file_type, cmfST.file_type, maf.file_type, pf.file_type, rf.file_type, scsf.file_type, sf.file_type] as file_types, rf, scsf, pf, maf, cmf, cmfST, fu, p, st, sf, sm, stf, stp, dg
        RETURN DISTINCT
          dg.diagnosis_id as diagnosis_id,
          dg.diagnosis_icd_o as diagnosis_icd_o,
          dg.disease_phase as disease_phase,
          dg.anatomic_site as diagnosis_anatomic_site,
          dg.age_at_diagnosis as age_at_diagnosis,
          p.participant_id as participant_id,
          p.race as race,
          p.gender as gender,
          p.ethnicity as ethnicity,
          st.phs_accession as phs_accession,
          st.study_acronym as study_acronym,
          st.study_short_title as study_short_title,
          COLLECT(DISTINCT {
              vital_status: fu.vital_status,
              sample_anatomic_site: sm.anatomic_site,
              participant_age_at_collection: sm.participant_age_at_collection,
              sample_tumor_status: sm.sample_tumor_status,
              tumor_classification: sm.tumor_classification,
              clinical_measure_file: exists((p)<-[:of_clinical_measure_file_participant]-(cmf)) OR exists((st)<-[:of_clinical_measure_file]-(cmfST)),
              methylation_array_file: exists((p)<-[:of_sample]-(sm)<-[:of_methylation_array_file]-(maf)),
              pathology_file: exists((p)<-[:of_sample]-(sm)<-[:of_pathology_file]-(pf)),
              radiology_file: exists((p)<-[:of_radiology_file]-(rf)),
              single_cell_sequencing_file: exists((p)<-[:of_sample]-(sm)<-[:of_single_cell_sequencing_file]-(scsf)),
              sequencing_file: exists((p)<-[:of_sample]-(sm)<-[:of_sequencing_file]-(sf)),
              file_type: [ft in file_types where ft is not null],
              grant_id: stf.grant_id,
              institution: stp.institution,
              library_selection: sf.library_selection,
              library_source: sf.library_source,
              library_strategy: sf.library_strategy
          }) AS nested_filters
       "

  - index_name: studies
    type: neo4j
    mapping:
      study_id:
        type: keyword
      pubmed_ids:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      phs_accession:
        type: keyword
      study_short_title:
        type: keyword
      study_acronym:
        type: keyword
      PIs:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      num_of_participants:
        type: integer
      num_of_diagnosis:
        type: integer
      num_of_samples:
        type: integer
      num_of_files:
        type: integer
      cmf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      cmfST_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      maf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      pf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      rf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      scsf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      sf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
        MATCH (st:study)
        OPTIONAL MATCH (st)<-[:of_participant]-(p:participant)
        OPTIONAL MATCH (st)<-[:of_publication]-(pub:publication)
        OPTIONAL MATCH (p)<-[:of_diagnosis]-(dg:diagnosis)
        OPTIONAL MATCH (p)<-[:of_follow_up]-(fu:follow_up)
        OPTIONAL MATCH (p)<-[:of_sample]-(sm:sample)
        OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
        OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
        OPTIONAL MATCH (p)-[:of_clinical_measure_file_participant]-(cmf:clinical_measure_file)
        OPTIONAL MATCH (st)<-[:of_clinical_measure_file]-(cmfST:clinical_measure_file)
        OPTIONAL MATCH (sm)<-[:of_methylation_array_file]-(maf:methylation_array_file)
        OPTIONAL MATCH (sm)<-[:of_pathology_file]-(pf:pathology_file)
        OPTIONAL MATCH (p)<-[:of_radiology_file]-(rf:radiology_file)
        OPTIONAL MATCH (sm)<-[:of_single_cell_sequencing_file]-(scsf:single_cell_sequencing_file)
        OPTIONAL MATCH (sm)<-[:of_sequencing_file]-(sf:sequencing_file)
        WITH rf, scsf, pf, maf, cmf, cmfST, fu, p, st, sf,sm,stf,stp, dg, pub
        RETURN DISTINCT
          st.study_id as study_id,
          COLLECT(DISTINCT pub.pubmed_id) as pubmed_ids,
          st.phs_accession as phs_accession,
          st.study_short_title as study_short_title,
          st.study_acronym as study_acronym,
          COLLECT(DISTINCT stp.personnel_name) as PIs,
          COUNT(DISTINCT p.participant_id) as num_of_participants,
          COUNT(DISTINCT dg.diagnosis_id) as num_of_diagnosis,
          COUNT(DISTINCT sm.sample_id) as num_of_samples,
          count(DISTINCT cmf.clinical_measure_file_id) + count(DISTINCT cmfST.clinical_measure_file_id) + count(DISTINCT maf.methylation_array_file_id) + count(DISTINCT pf.pathology_file_id) + count(DISTINCT rf.radiology_file_id) + count(DISTINCT scsf.single_cell_sequencing_file_id) + count(DISTINCT sf.sequencing_file_id) as num_of_files,
          COLLECT(DISTINCT cmf.dcf_indexd_guid) as cmf_uuid,
          COLLECT(DISTINCT cmfST.dcf_indexd_guid) as cmfST_uuid,
          COLLECT(DISTINCT maf.dcf_indexd_guid) as maf_uuid,
          COLLECT(DISTINCT pf.dcf_indexd_guid) as pf_uuid,
          COLLECT(DISTINCT rf.dcf_indexd_guid) as rf_uuid,
          COLLECT(DISTINCT scsf.dcf_indexd_guid) as scsf_uuid,
          COLLECT(DISTINCT sf.dcf_indexd_guid) as sf_uuid
       "

  - index_name: samples
    type: neo4j
    mapping:
      sample_id:
        type: keyword
      participant_id:
        type: keyword
      race:
        type: keyword
      gender:
        type: keyword
      ethnicity:
        type: keyword
      sample_anatomic_site:
        type: keyword
      sample_diagnosis_icd_o:
        type: keyword
      participant_age_at_collection:
        type: integer
      sample_tumor_status:
        type: keyword
      tumor_classification:
        type: keyword
      study_id:
        type: keyword
      phs_accession:
        type: keyword
      study_acronym:
        type: keyword
      study_short_title:
        type: keyword
      cmf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      cmfST_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      maf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      pf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      rf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      scsf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      sf_uuid:
        type: text
        fields:
          keyword:
            type: keyword
            ignore_above: 256
      nested_filters:
        type: nested
        properties:
          age_at_diagnosis:
            type: integer
          diagnosis_anatomic_site:
            type: keyword
          disease_phase:
            type: keyword
          diagnosis_icd_o:
            type: keyword
          vital_status:
            type: keyword
          clinical_measure_file:
            type: boolean
          methylation_array_file:
            type: boolean
          pathology_file:
            type: boolean
          radiology_file:
            type: boolean
          single_cell_sequencing_file:
            type: boolean
          sequencing_file:
            type: boolean
          file_type:
            type: text
            fields:
              keyword:
                type: keyword
                ignore_above: 256
          grant_id:
            type: keyword
          institution:
            type: keyword
          library_selection:
            type: keyword
          library_source:
            type: keyword
          library_strategy:
            type: keyword
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
        MATCH (sm:sample)
        OPTIONAL MATCH (p:participant)<-[:of_sample]-(sm)
        OPTIONAL MATCH (st:study)<-[:of_participant]-(p)
        OPTIONAL MATCH (st)<-[:of_publication]-(pub:publication)
        OPTIONAL MATCH (p)<-[:of_diagnosis]-(dg:diagnosis)
        OPTIONAL MATCH (p)<-[:of_follow_up]-(fu:follow_up)
        OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
        OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
        OPTIONAL MATCH (p)-[:of_clinical_measure_file_participant]-(cmf:clinical_measure_file)
        OPTIONAL MATCH (st)<-[:of_clinical_measure_file]-(cmfST:clinical_measure_file)
        OPTIONAL MATCH (sm)<-[:of_methylation_array_file]-(maf:methylation_array_file)
        OPTIONAL MATCH (sm)<-[:of_pathology_file]-(pf:pathology_file)
        OPTIONAL MATCH (p)<-[:of_radiology_file]-(rf:radiology_file)
        OPTIONAL MATCH (sm)<-[:of_single_cell_sequencing_file]-(scsf:single_cell_sequencing_file)
        OPTIONAL MATCH (sm)<-[:of_sequencing_file]-(sf:sequencing_file)
        WITH [cmf.file_type, cmfST.file_type, maf.file_type, pf.file_type, rf.file_type, scsf.file_type, sf.file_type] as file_types, rf, scsf, pf, maf, cmf, cmfST, fu, p, st, sf, sm, stf, stp, dg, pub
        RETURN DISTINCT
          sm.sample_id as sample_id,
          p.participant_id as participant_id,
          p.race as race,
          p.gender as gender,
          p.ethnicity as ethnicity,
          sm.anatomic_site as sample_anatomic_site,
          sm.diagnosis_icd_o as sample_diagnosis_icd_o,
          sm.participant_age_at_collection as participant_age_at_collection,
          sm.sample_tumor_status as sample_tumor_status,
          sm.tumor_classification as tumor_classification,
          st.study_id as study_id,
          st.phs_accession as phs_accession,
          st.study_acronym as study_acronym,
          st.study_short_title as study_short_title,
          COLLECT(DISTINCT cmf.dcf_indexd_guid) as cmf_uuid,
          COLLECT(DISTINCT cmfST.dcf_indexd_guid) as cmfST_uuid,
          COLLECT(DISTINCT maf.dcf_indexd_guid) as maf_uuid,
          COLLECT(DISTINCT pf.dcf_indexd_guid) as pf_uuid,
          COLLECT(DISTINCT rf.dcf_indexd_guid) as rf_uuid,
          COLLECT(DISTINCT scsf.dcf_indexd_guid) as scsf_uuid,
          COLLECT(DISTINCT sf.dcf_indexd_guid) as sf_uuid,
          COLLECT(DISTINCT {
              age_at_diagnosis: dg.age_at_diagnosis,
              diagnosis_anatomic_site: dg.anatomic_site,
              disease_phase: dg.disease_phase,
              diagnosis_icd_o: dg.diagnosis_icd_o,
              vital_status: fu.vital_status,
              clinical_measure_file: exists((p)<-[:of_clinical_measure_file_participant]-(cmf)) OR exists((st)<-[:of_clinical_measure_file]-(cmfST)),
              methylation_array_file: exists((p)<-[:of_sample]-(sm)<-[:of_methylation_array_file]-(maf)),
              pathology_file: exists((p)<-[:of_sample]-(sm)<-[:of_pathology_file]-(pf)),
              radiology_file: exists((p)<-[:of_radiology_file]-(rf)),
              single_cell_sequencing_file: exists((p)<-[:of_sample]-(sm)<-[:of_single_cell_sequencing_file]-(scsf)),
              sequencing_file: exists((p)<-[:of_sample]-(sm)<-[:of_sequencing_file]-(sf)),
              file_type: [ft in file_types where ft is not null],
              grant_id: stf.grant_id,
              institution: stp.institution,
              library_selection: sf.library_selection,
              library_source: sf.library_source,
              library_strategy: sf.library_strategy
          }) AS nested_filters
      "

  - index_name: files
    type: neo4j
    mapping:
      file_id:
        type: keyword
      file_name:
        type: keyword
      file_category:
        type: keyword
      file_type:
        type: keyword
      file_description:
        type: keyword
      file_size:
        type: keyword
      md5sum:
        type: keyword
      study_id:
        type: keyword
      phs_accession:
        type: keyword
      study_acronym:
        type: keyword
      study_short_title:
        type: keyword
      participant_id:
        type: keyword
      race:
        type: keyword
      gender:
        type: keyword
      ethnicity:
        type: keyword
      sample_id:
        type: keyword
      sample_anatomic_site:
        type: keyword
      participant_age_at_collection:
        type: integer
      sample_tumor_status:
        type: keyword
      tumor_classification:
        type: keyword
      nested_filters:
        type: nested
        properties:
          age_at_diagnosis:
            type: integer
          diagnosis_anatomic_site:
            type: keyword
          disease_phase:
            type: keyword
          diagnosis_icd_o:
            type: keyword
          vital_status:
            type: keyword
          grant_id:
            type: keyword
          institution:
            type: keyword
      library_selection:
        type: keyword
      library_source:
        type: keyword
      library_strategy:
        type: keyword
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
        MATCH (file:clinical_measure_file)
        OPTIONAL MATCH (p:participant)-[:of_clinical_measure_file_participant]-(file)
        OPTIONAL MATCH (st:study)<-[:of_clinical_measure_file]-(file)
        OPTIONAL MATCH (p)<-[:of_sample]-(sm:sample)
        OPTIONAL MATCH (st)<-[:of_participant]-(p)
        OPTIONAL MATCH (st)<-[:of_publication]-(pub:publication)
        OPTIONAL MATCH (p)<-[:of_diagnosis]-(dg:diagnosis)
        OPTIONAL MATCH (p)<-[:of_follow_up]-(fu:follow_up)
        OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
        OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
        RETURN DISTINCT
          file.dcf_indexd_guid AS file_id,
          file.file_name AS file_name,
          'Clinical measure' AS file_category,
          file.file_type AS file_type,
          file.file_description AS file_description,
          file.file_size AS file_size,
          file.md5sum AS md5sum,
          st.study_id AS study_id,
          st.phs_accession as phs_accession,
          st.study_acronym as study_acronym,
          st.study_short_title as study_short_title,
          p.participant_id AS participant_id,
          p.race as race,
          p.gender as gender,
          p.ethnicity as ethnicity,
          sm.sample_id AS sample_id,
          sm.anatomic_site AS sample_anatomic_site,
          sm.participant_age_at_collection AS participant_age_at_collection,
          sm.sample_tumor_status AS sample_tumor_status,
          sm.tumor_classification AS tumor_classification,
          COLLECT(DISTINCT {
              age_at_diagnosis: dg.age_at_diagnosis,
              diagnosis_anatomic_site: dg.anatomic_site,
              disease_phase: dg.disease_phase,
              diagnosis_icd_o: dg.diagnosis_icd_o,
              vital_status: fu.vital_status
          }) AS nested_filters,
          file.library_selection AS library_selection,
          file.library_source AS library_source,
          file.library_strategy AS library_strategy
        UNION ALL
        MATCH (file:methylation_array_file)
        OPTIONAL MATCH (sm:sample)<-[:of_methylation_array_file]-(file)
        OPTIONAL MATCH (p:participant)<-[:of_sample]-(sm)
        OPTIONAL MATCH (st:study)<-[:of_participant]-(p)
        OPTIONAL MATCH (st)<-[:of_publication]-(pub:publication)
        OPTIONAL MATCH (p)<-[:of_diagnosis]-(dg:diagnosis)
        OPTIONAL MATCH (p)<-[:of_follow_up]-(fu:follow_up)
        OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
        OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
        RETURN DISTINCT
          file.dcf_indexd_guid AS file_id,
          file.file_name AS file_name,
          'Methylation array' AS file_category,
          file.file_type AS file_type,
          file.file_description AS file_description,
          file.file_size AS file_size,
          file.md5sum AS md5sum,
          st.study_id AS study_id,
          st.phs_accession as phs_accession,
          st.study_acronym as study_acronym,
          st.study_short_title as study_short_title,
          p.participant_id AS participant_id,
          p.race as race,
          p.gender as gender,
          p.ethnicity as ethnicity,
          sm.sample_id AS sample_id,
          sm.anatomic_site AS sample_anatomic_site,
          sm.participant_age_at_collection AS participant_age_at_collection,
          sm.sample_tumor_status AS sample_tumor_status,
          sm.tumor_classification AS tumor_classification,
          COLLECT(DISTINCT {
              age_at_diagnosis: dg.age_at_diagnosis,
              diagnosis_anatomic_site: dg.anatomic_site,
              disease_phase: dg.disease_phase,
              diagnosis_icd_o: dg.diagnosis_icd_o,
              vital_status: fu.vital_status
          }) AS nested_filters,
          file.library_selection AS library_selection,
          file.library_source AS library_source,
          file.library_strategy AS library_strategy
        UNION ALL
        MATCH (file:pathology_file)
        OPTIONAL MATCH (sm:sample)<-[:of_pathology_file]-(file)
        OPTIONAL MATCH (p:participant)<-[:of_sample]-(sm)
        OPTIONAL MATCH (st:study)<-[:of_participant]-(p)
        OPTIONAL MATCH (st)<-[:of_publication]-(pub:publication)
        OPTIONAL MATCH (p)<-[:of_diagnosis]-(dg:diagnosis)
        OPTIONAL MATCH (p)<-[:of_follow_up]-(fu:follow_up)
        OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
        OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
        RETURN DISTINCT
          file.dcf_indexd_guid AS file_id,
          file.file_name AS file_name,
          'Pathology imaging' AS file_category,
          file.file_type AS file_type,
          file.file_description AS file_description,
          file.file_size AS file_size,
          file.md5sum AS md5sum,
          st.study_id AS study_id,
          st.phs_accession as phs_accession,
          st.study_acronym as study_acronym,
          st.study_short_title as study_short_title,
          p.participant_id AS participant_id,
          p.race as race,
          p.gender as gender,
          p.ethnicity as ethnicity,
          sm.sample_id AS sample_id,
          sm.anatomic_site AS sample_anatomic_site,
          sm.participant_age_at_collection AS participant_age_at_collection,
          sm.sample_tumor_status AS sample_tumor_status,
          sm.tumor_classification AS tumor_classification,
          COLLECT(DISTINCT {
              age_at_diagnosis: dg.age_at_diagnosis,
              diagnosis_anatomic_site: dg.anatomic_site,
              disease_phase: dg.disease_phase,
              diagnosis_icd_o: dg.diagnosis_icd_o,
              vital_status: fu.vital_status
          }) AS nested_filters,
          file.library_selection AS library_selection,
          file.library_source AS library_source,
          file.library_strategy AS library_strategy
        UNION ALL
        MATCH (file:radiology_file)
        OPTIONAL MATCH (p:participant)<-[:of_radiology_file]-(file)
        OPTIONAL MATCH (p)<-[:of_sample]-(sm:sample)
        OPTIONAL MATCH (st:study)<-[:of_participant]-(p)
        OPTIONAL MATCH (st)<-[:of_publication]-(pub:publication)
        OPTIONAL MATCH (p)<-[:of_diagnosis]-(dg:diagnosis)
        OPTIONAL MATCH (p)<-[:of_follow_up]-(fu:follow_up)
        OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
        OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
        RETURN DISTINCT
          file.dcf_indexd_guid AS file_id,
          file.file_name AS file_name,
          'Radiology imaging' AS file_category,
          file.file_type AS file_type,
          file.file_description AS file_description,
          file.file_size AS file_size,
          file.md5sum AS md5sum,
          st.study_id AS study_id,
          st.phs_accession as phs_accession,
          st.study_acronym as study_acronym,
          st.study_short_title as study_short_title,
          p.participant_id AS participant_id,
          p.race as race,
          p.gender as gender,
          p.ethnicity as ethnicity,
          sm.sample_id AS sample_id,
          sm.anatomic_site AS sample_anatomic_site,
          sm.participant_age_at_collection AS participant_age_at_collection,
          sm.sample_tumor_status AS sample_tumor_status,
          sm.tumor_classification AS tumor_classification,
          COLLECT(DISTINCT {
              age_at_diagnosis: dg.age_at_diagnosis,
              diagnosis_anatomic_site: dg.anatomic_site,
              disease_phase: dg.disease_phase,
              diagnosis_icd_o: dg.diagnosis_icd_o,
              vital_status: fu.vital_status
          }) AS nested_filters,
          file.library_selection AS library_selection,
          file.library_source AS library_source,
          file.library_strategy AS library_strategy
        UNION ALL
        MATCH (file:single_cell_sequencing_file)
        OPTIONAL MATCH (sm:sample)<-[:of_single_cell_sequencing_file]-(file)
        OPTIONAL MATCH (p:participant)<-[:of_sample]-(sm)
        OPTIONAL MATCH (st:study)<-[:of_participant]-(p)
        OPTIONAL MATCH (st)<-[:of_publication]-(pub:publication)
        OPTIONAL MATCH (p)<-[:of_diagnosis]-(dg:diagnosis)
        OPTIONAL MATCH (p)<-[:of_follow_up]-(fu:follow_up)
        OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
        OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
        RETURN DISTINCT
          file.dcf_indexd_guid AS file_id,
          file.file_name AS file_name,
          'Single Cell Sequencing' AS file_category,
          file.file_type AS file_type,
          file.file_description AS file_description,
          file.file_size AS file_size,
          file.md5sum AS md5sum,
          st.study_id AS study_id,
          st.phs_accession as phs_accession,
          st.study_acronym as study_acronym,
          st.study_short_title as study_short_title,
          p.participant_id AS participant_id,
          p.race as race,
          p.gender as gender,
          p.ethnicity as ethnicity,
          sm.sample_id AS sample_id,
          sm.anatomic_site AS sample_anatomic_site,
          sm.participant_age_at_collection AS participant_age_at_collection,
          sm.sample_tumor_status AS sample_tumor_status,
          sm.tumor_classification AS tumor_classification,
          COLLECT(DISTINCT {
              age_at_diagnosis: dg.age_at_diagnosis,
              diagnosis_anatomic_site: dg.anatomic_site,
              disease_phase: dg.disease_phase,
              diagnosis_icd_o: dg.diagnosis_icd_o,
              vital_status: fu.vital_status
          }) AS nested_filters,
          file.library_selection AS library_selection,
          file.library_source AS library_source,
          file.library_strategy AS library_strategy
        UNION ALL
        MATCH (file:sequencing_file)
        OPTIONAL MATCH (sm:sample)<-[:of_sequencing_file]-(file)
        OPTIONAL MATCH (p:participant)<-[:of_sample]-(sm)
        OPTIONAL MATCH (st:study)<-[:of_participant]-(p)
        OPTIONAL MATCH (st)<-[:of_publication]-(pub:publication)
        OPTIONAL MATCH (p)<-[:of_diagnosis]-(dg:diagnosis)
        OPTIONAL MATCH (p)<-[:of_follow_up]-(fu:follow_up)
        OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
        OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
        RETURN DISTINCT
          file.dcf_indexd_guid AS file_id,
          file.file_name AS file_name,
          'Sequencing' AS file_category,
          file.file_type AS file_type,
          file.file_description AS file_description,
          file.file_size AS file_size,
          file.md5sum AS md5sum,
          st.study_id AS study_id,
          st.phs_accession as phs_accession,
          st.study_acronym as study_acronym,
          st.study_short_title as study_short_title,
          p.participant_id AS participant_id,
          p.race as race,
          p.gender as gender,
          p.ethnicity as ethnicity,
          sm.sample_id AS sample_id,
          sm.anatomic_site AS sample_anatomic_site,
          sm.participant_age_at_collection AS participant_age_at_collection,
          sm.sample_tumor_status AS sample_tumor_status,
          sm.tumor_classification AS tumor_classification,
          COLLECT(DISTINCT {
              age_at_diagnosis: dg.age_at_diagnosis,
              diagnosis_anatomic_site: dg.anatomic_site,
              disease_phase: dg.disease_phase,
              diagnosis_icd_o: dg.diagnosis_icd_o,
              vital_status: fu.vital_status
          }) AS nested_filters,
          file.library_selection AS library_selection,
          file.library_source AS library_source,
          file.library_strategy AS library_strategy
      "