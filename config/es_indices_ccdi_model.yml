# Indices settings
Indices:
  - index_name: study_participants
    type: neo4j
    mapping:
      id:
        type: keyword
      pid:
        type: keyword
      participant_id:
        type: keyword
      race:
        type: keyword
      sex_at_birth:
        type: keyword
      last_known_survival_status:
        type: keyword
      sample_diagnosis_file_filters:
        type: nested
        properties:
          sample_anatomic_site:
            type: keyword
          participant_age_at_collection:
            type: integer
          sample_tumor_status:
            type: keyword
          tumor_classification:
            type: keyword
          age_at_diagnosis:
            type: integer
          diagnosis_anatomic_site:
            type: keyword
          disease_phase:
            type: keyword
          diagnosis_classification_system:
            type: keyword
          diagnosis_basis:
            type: keyword
          tumor_grade_source:
            type: keyword  
          tumor_stage_source:
            type: keyword            
          diagnosis:
            type: keyword
          assay_method:
            type: keyword
          file_type:
            type: keyword
          library_selection:
            type: keyword
          library_source_material:
            type: keyword
          library_source_molecule:
            type: keyword
          library_strategy:
            type: keyword
      study_id:
        type: keyword
      dbgap_accession:
        type: keyword
      study_acronym:
        type: keyword
      study_name:
        type: keyword
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_queries:
      - query: |
          MATCH (p:participant)
          optional match (p)<--(sm:sample)
          optional match (p)<--(file)
          where (file: clinical_measure_file or file: radiology_file)
          with distinct p, sm, file
          with p, collect(DISTINCT {
                      sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                      participant_age_at_collection: sm.participant_age_at_collection,
                      sample_tumor_status: sm.sample_tumor_status,
                      tumor_classification: sm.tumor_classification,
                      assay_method: CASE labels(file)[0] WHEN 'clinical_measure_file' THEN 'Clinical data'
                                        WHEN 'radiology_file' THEN 'Radiology imaging'
                                        ELSE null END,
                      file_type: file.file_type,
                      library_selection: null,
                      library_source_material: null,
                      library_source_molecule: null,
                      library_strategy: null
              }) as sample_clinical_radiology_file_filter
          optional match (p)<--(sm:sample)<--(file)
          where (file: sequencing_file or file: methylation_array_file or file: pathology_file or file: cytogenomic_file)
          with p, sample_clinical_radiology_file_filter, collect(DISTINCT {
                      sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                      participant_age_at_collection: sm.participant_age_at_collection,
                      sample_tumor_status: sm.sample_tumor_status,
                      tumor_classification: sm.tumor_classification,
                      assay_method: CASE LABELS(file)[0]
                                              WHEN 'sequencing_file' THEN 'Sequencing'
                                              WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                              WHEN 'pathology_file' THEN 'Pathology imaging'
                                              WHEN 'methylation_array_file' THEN 'Methylation array'
                                              ELSE null END,
                      file_type: file.file_type,
                      library_selection: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN file.library_selection
                                    ELSE null END,
                      library_source_material: CASE LABELS(file)[0]
                                            WHEN 'sequencing_file' THEN file.library_source_material
                                            ELSE null END,
                      library_source_molecule: CASE LABELS(file)[0]
                                            WHEN 'sequencing_file' THEN file.library_source_molecule
                                            ELSE null END,
                      library_strategy: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN file.library_strategy
                                    ELSE null END
              }) as sample_sequencing_cytogenomic_pathology_methylation_file_filter
            with p, apoc.coll.union(sample_clinical_radiology_file_filter, sample_sequencing_cytogenomic_pathology_methylation_file_filter) as sample_file_filters
            optional match (p)<--(dg:diagnosis)
            with p, sample_file_filters, dg
            unwind sample_file_filters as sample_file_filter
            with p, collect(apoc.map.merge(sample_file_filter, {
                age_at_diagnosis: dg.age_at_diagnosis,
                diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                disease_phase: dg.disease_phase,
                diagnosis_classification_system: dg.diagnosis_classification_system,
                diagnosis_basis: dg.diagnosis_basis, 
                tumor_grade_source: dg.tumor_grade_source,
                tumor_stage_source: dg.tumor_stage_source,          
                diagnosis: dg.diagnosis
              })) as sample_diagnosis_file_filter
            optional match (p)<--(sm:sample)<--(dg:diagnosis)
            optional match (sm)<--(file)
            where (file: sequencing_file or file: methylation_array_file or file: pathology_file or file: cytogenomic_file)
            with p, sample_diagnosis_file_filter, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                    participant_age_at_collection: sm.participant_age_at_collection,
                    sample_tumor_status: sm.sample_tumor_status,
                    tumor_classification: sm.tumor_classification,
                    age_at_diagnosis: dg.age_at_diagnosis,
                    diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                    disease_phase: dg.disease_phase,
                    diagnosis_classification_system: dg.diagnosis_classification_system,
                    diagnosis_basis: dg.diagnosis_basis, 
                    tumor_grade_source: dg.tumor_grade_source,
                    tumor_stage_source: dg.tumor_stage_source,          
                    diagnosis: dg.diagnosis,
                    assay_method: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN 'Sequencing'
                                    WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                    WHEN 'pathology_file' THEN 'Pathology imaging'
                                    WHEN 'methylation_array_file' THEN 'Methylation array'
                                    ELSE null END,
                    file_type: file.file_type,
                    library_selection: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_selection
                              ELSE null END,
                    library_source_material: CASE LABELS(file)[0]
                                            WHEN 'sequencing_file' THEN file.library_source_material
                                            ELSE null END,
                    library_source_molecule: CASE LABELS(file)[0]
                                            WHEN 'sequencing_file' THEN file.library_source_molecule
                                            ELSE null END,
                    library_strategy: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_strategy
                              ELSE null END
                }) AS sample_diagnosis_filters_1
            with p, apoc.coll.union(sample_diagnosis_file_filter, sample_diagnosis_filters_1) as sample_diagnosis_file_filters
            optional match (p)<--(sm:sample)<--(dg:diagnosis)
            optional match (p)<--(file)
            where (file: clinical_measure_file or file: radiology_file)
            with p, sample_diagnosis_file_filters, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                    participant_age_at_collection: sm.participant_age_at_collection,
                    sample_tumor_status: sm.sample_tumor_status,
                    tumor_classification: sm.tumor_classification,
                    age_at_diagnosis: dg.age_at_diagnosis,
                    diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                    disease_phase: dg.disease_phase,
                    diagnosis_classification_system: dg.diagnosis_classification_system,
                    diagnosis_basis: dg.diagnosis_basis, 
                    tumor_grade_source: dg.tumor_grade_source,
                    tumor_stage_source: dg.tumor_stage_source,          
                    diagnosis: dg.diagnosis,
                    assay_method: CASE labels(file)[0] WHEN 'clinical_measure_file' THEN 'Clinical data'
                                        WHEN 'radiology_file' THEN 'Radiology imaging'
                                        ELSE null END,
                    file_type: file.file_type,
                    library_selection: null,
                    library_source_material: null,
                    library_source_molecule: null,
                    library_strategy: null
                }) AS sample_diagnosis_filters_2
            with p, apoc.coll.union(sample_diagnosis_file_filters, sample_diagnosis_filters_2) as sample_diagnosis_file_filter
          optional MATCH (p)<-[:of_sample]-(sm1:sample)<--(cl)<--(sm2:sample)
          WHERE (cl: cell_line or cl: pdx)
          optional Match (sm2)<--(file)
          WHERE (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          optional Match (sm1)<--(dg:diagnosis)
          with p, sample_diagnosis_file_filter, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm1.anatomic_site, ';'),
                    participant_age_at_collection: sm1.participant_age_at_collection,
                    sample_tumor_status: sm1.sample_tumor_status,
                    tumor_classification: sm1.tumor_classification,
                    age_at_diagnosis: dg.age_at_diagnosis,
                    diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                    disease_phase: dg.disease_phase,
                    diagnosis_classification_system: dg.diagnosis_classification_system,
                    diagnosis_basis: dg.diagnosis_basis, 
                    tumor_grade_source: dg.tumor_grade_source,
                    tumor_stage_source: dg.tumor_stage_source,          
                    diagnosis: dg.diagnosis,
                    assay_method: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN 'Sequencing'
                                    WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                    WHEN 'pathology_file' THEN 'Pathology imaging'
                                    WHEN 'methylation_array_file' THEN 'Methylation array'
                                    ELSE null END,
                    file_type: file.file_type,
                    library_selection: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_selection
                              ELSE null END,
                    library_source_material: CASE LABELS(file)[0]
                                            WHEN 'sequencing_file' THEN file.library_source_material
                                            ELSE null END,
                    library_source_molecule: CASE LABELS(file)[0]
                                            WHEN 'sequencing_file' THEN file.library_source_molecule
                                            ELSE null END,
                    library_strategy: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_strategy
                              ELSE null END
                }) AS sample_diagnosis_filters_1
            with p, apoc.coll.union(sample_diagnosis_file_filter, sample_diagnosis_filters_1) as sample_diagnosis_file_filters
          optional MATCH (p)<-[:of_sample]-(sm1:sample)<--(cl)<--(sm2:sample)
          WHERE (cl: cell_line or cl: pdx)
          optional Match (sm2)<--(file)
          WHERE (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          optional Match (sm2)<--(dg:diagnosis)
          with p, sample_diagnosis_file_filters, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm2.anatomic_site, ';'),
                    participant_age_at_collection: sm2.participant_age_at_collection,
                    sample_tumor_status: sm2.sample_tumor_status,
                    tumor_classification: sm2.tumor_classification,
                    age_at_diagnosis: dg.age_at_diagnosis,
                    diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                    disease_phase: dg.disease_phase,
                    diagnosis_classification_system: dg.diagnosis_classification_system,
                    diagnosis_basis: dg.diagnosis_basis, 
                    tumor_grade_source: dg.tumor_grade_source,
                    tumor_stage_source: dg.tumor_stage_source,          
                    diagnosis: dg.diagnosis,
                    assay_method: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN 'Sequencing'
                                    WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                    WHEN 'pathology_file' THEN 'Pathology imaging'
                                    WHEN 'methylation_array_file' THEN 'Methylation array'
                                    ELSE null END,
                    file_type: file.file_type,
                    library_selection: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_selection
                              ELSE null END,
                    library_source_material: CASE LABELS(file)[0]
                                            WHEN 'sequencing_file' THEN file.library_source_material
                                            ELSE null END,
                    library_source_molecule: CASE LABELS(file)[0]
                                            WHEN 'sequencing_file' THEN file.library_source_molecule
                                            ELSE null END,
                    library_strategy: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_strategy
                              ELSE null END
                }) AS sample_diagnosis_filters_2
            with p, apoc.coll.union(sample_diagnosis_file_filters, sample_diagnosis_filters_2) as sample_diagnosis_file_filter
          optional MATCH (p)<-[:of_sample]-(sm1:sample)<--(cl)<--(sm2:sample)
          WHERE (cl: cell_line or cl: pdx)
          optional Match (sm1)<--(dg:diagnosis)
          optional match (p)<--(file)
          where (file: clinical_measure_file or file: radiology_file)
          with p, sample_diagnosis_file_filter, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm1.anatomic_site, ';'),
                    participant_age_at_collection: sm1.participant_age_at_collection,
                    sample_tumor_status: sm1.sample_tumor_status,
                    tumor_classification: sm1.tumor_classification,
                    age_at_diagnosis: dg.age_at_diagnosis,
                    diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                    disease_phase: dg.disease_phase,
                    diagnosis_classification_system: dg.diagnosis_classification_system,
                    diagnosis_basis: dg.diagnosis_basis, 
                    tumor_grade_source: dg.tumor_grade_source,
                    tumor_stage_source: dg.tumor_stage_source,          
                    diagnosis: dg.diagnosis,
                    assay_method: CASE labels(file)[0] WHEN 'clinical_measure_file' THEN 'Clinical data'
                                        WHEN 'radiology_file' THEN 'Radiology imaging'
                                        ELSE null END,
                    file_type: file.file_type,
                    library_selection: null,
                    library_source_material: null,
                    library_source_molecule: null,
                    library_strategy: null
                }) AS sample_diagnosis_filters_3
            with p, apoc.coll.union(sample_diagnosis_file_filter, sample_diagnosis_filters_3) as sample_diagnosis_file_filters
          optional MATCH (p)<-[:of_sample]-(sm1:sample)<--(cl)<--(sm2:sample)
          WHERE (cl: cell_line or cl: pdx)
          optional Match (sm2)<--(dg:diagnosis)
          optional match (p)<--(file)
          where (file: clinical_measure_file or file: radiology_file)
          with p, sample_diagnosis_file_filters, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm2.anatomic_site, ';'),
                    participant_age_at_collection: sm2.participant_age_at_collection,
                    sample_tumor_status: sm2.sample_tumor_status,
                    tumor_classification: sm2.tumor_classification,
                    age_at_diagnosis: dg.age_at_diagnosis,
                    diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                    disease_phase: dg.disease_phase,
                    diagnosis_classification_system: dg.diagnosis_classification_system,
                    diagnosis_basis: dg.diagnosis_basis, 
                    tumor_grade_source: dg.tumor_grade_source,
                    tumor_stage_source: dg.tumor_stage_source,          
                    diagnosis: dg.diagnosis,
                    assay_method: CASE labels(file)[0] WHEN 'clinical_measure_file' THEN 'Clinical data'
                                        WHEN 'radiology_file' THEN 'Radiology imaging'
                                        ELSE null END,
                    file_type: file.file_type,
                    library_selection: null,
                    library_source_material: null,
                    library_source_molecule: null,
                    library_strategy: null
                }) AS sample_diagnosis_filters_4
            with p, apoc.coll.union(sample_diagnosis_file_filters, sample_diagnosis_filters_4) as sample_diagnosis_file_filter
            OPTIONAL MATCH (p)<-[:of_survival]-(su:survival)
            OPTIONAL MATCH (st:study)<-[:of_participant]-(p)
            OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
            OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
            WITH p, sample_diagnosis_file_filter, COLLECT(DISTINCT su.last_known_survival_status) as vital_status, st, stf, stp
            RETURN DISTINCT
              p.id as id,
              p.id as pid,
              p.participant_id as participant_id,
              apoc.text.split(p.race, ';') as race,
              p.sex_at_birth as sex_at_birth,
              case when 'Dead' in vital_status then ['Dead']
                  else vital_status end as last_known_survival_status,
              sample_diagnosis_file_filter AS sample_diagnosis_file_filters,
              st.study_id as study_id,
              st.dbgap_accession as dbgap_accession,
              st.study_acronym as study_acronym,
              st.study_name as study_name
      - query: |
          MATCH (st:study)
          MATCH (st)<-[:of_clinical_measure_file]-(file:clinical_measure_file)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          WITH file, st, stf, stp
          RETURN DISTINCT
            null as id,
            null as pid,
            null as participant_id,
            null as race,
            null as sex_at_birth,
            null as last_known_survival_status,
            COLLECT(DISTINCT {
                sample_anatomic_site: null,
                participant_age_at_collection: null,
                sample_tumor_status: null,
                tumor_classification: null,
                age_at_diagnosis: null,
                diagnosis_anatomic_site: null,
                disease_phase: null,
                diagnosis_classification_system: null,
                diagnosis_basis: null, 
                tumor_grade_source: null,
                tumor_stage_source: null,          
                diagnosis: null,
                assay_method: 'Clinical data',
                file_type: file.file_type,
                library_selection: null,
                library_source_material: null,
                library_source_molecule: null,
                library_strategy: null
            }) AS sample_diagnosis_file_filters,
            st.study_id as study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name
      - query: |
          MATCH (st:study)
          MATCH (st)<-[:of_cell_line|of_pdx]-(cl)<--(sm:sample)
          Where (cl: cell_line or cl: pdx)
          optional Match (sm)<--(dg:diagnosis)
          optional Match (sm)<--(file)
          WHERE (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          WITH file, dg, sm, st, stf, stp
          RETURN DISTINCT
            null as id,
            null as pid,
            null as participant_id,
            null as race,
            null as sex_at_birth,
            null as last_known_survival_status,
            COLLECT(DISTINCT {
                sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                participant_age_at_collection: sm.participant_age_at_collection,
                sample_tumor_status: sm.sample_tumor_status,
                tumor_classification: sm.tumor_classification,
                age_at_diagnosis: dg.age_at_diagnosis,
                diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                disease_phase: dg.disease_phase,
                diagnosis_classification_system: dg.diagnosis_classification_system,
                diagnosis_basis: dg.diagnosis_basis, 
                tumor_grade_source: dg.tumor_grade_source,
                tumor_stage_source: dg.tumor_stage_source,          
                diagnosis: dg.diagnosis,
                assay_method: CASE LABELS(file)[0]
                                WHEN 'sequencing_file' THEN 'Sequencing'
                                WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                WHEN 'pathology_file' THEN 'Pathology imaging'
                                WHEN 'methylation_array_file' THEN 'Methylation array'
                                ELSE null END,
                file_type: CASE LABELS(file)[0]
                          When null then null
                          ELSE file.file_type end,
                library_selection: CASE LABELS(file)[0]
                          WHEN 'sequencing_file' THEN file.library_selection
                          ELSE null END,
                library_source_material: CASE LABELS(file)[0]
                          WHEN 'sequencing_file' THEN file.library_source_material
                          ELSE null END,
                library_source_molecule: CASE LABELS(file)[0]
                          WHEN 'sequencing_file' THEN file.library_source_molecule
                          ELSE null END,
                library_strategy: CASE LABELS(file)[0]
                          WHEN 'sequencing_file' THEN file.library_strategy
                          ELSE null END
            }) AS sample_diagnosis_file_filters,
            st.study_id as study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name
    

  - index_name: participants
    type: neo4j
    mapping:
      id:
        type: keyword
      participant_id:
        type: keyword
        normalizer: lowercase
      race:
        type: keyword
      race_str:
        type: keyword
      sex_at_birth:
        type: keyword
      alternate_participant_id:
        type: keyword
      last_known_survival_status:
        type: keyword
      sample_diagnosis_file_filters:
        type: nested
        properties:
          sample_anatomic_site:
            type: keyword
          participant_age_at_collection:
            type: integer
          sample_tumor_status:
            type: keyword
          tumor_classification:
            type: keyword
          age_at_diagnosis:
            type: integer
          diagnosis_anatomic_site:
            type: keyword
          disease_phase:
            type: keyword
          diagnosis_classification_system:
            type: keyword
          diagnosis_basis:
            type: keyword
          tumor_grade_source:
            type: keyword  
          tumor_stage_source:
            type: keyword              
          diagnosis:
            type: keyword
          assay_method:
            type: keyword
          file_type:
            type: keyword
          library_selection:
            type: keyword
          library_source_material:
            type: keyword
          library_source_molecule:
            type: keyword
          library_strategy:
            type: keyword
      study_id:
        type: keyword
      dbgap_accession:
        type: keyword
      study_acronym:
        type: keyword
      study_name:
        type: keyword
      file_count:
        type: integer
      files:
        type: text
        fields:
          keyword:
            type: keyword
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_queries:
      - query: |
          MATCH (p:participant)
          optional match (p)<--(sm:sample)
          optional match (p)<--(file)
          where (file: clinical_measure_file or file: radiology_file)
          with distinct p, sm, file
          with p, collect(DISTINCT {
                      sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                      participant_age_at_collection: sm.participant_age_at_collection,
                      sample_tumor_status: sm.sample_tumor_status,
                      tumor_classification: sm.tumor_classification,
                      assay_method: CASE labels(file)[0] WHEN 'clinical_measure_file' THEN 'Clinical data'
                                        WHEN 'radiology_file' THEN 'Radiology imaging'
                                        ELSE null END,
                      file_type: file.file_type,
                      library_source_material: null,
                      library_source_molecule: null,
                      library_strategy: null
              }) as sample_clinical_radiology_file_filter
          optional match (p)<--(sm:sample)<--(file)
          where (file: sequencing_file or file: methylation_array_file or file: pathology_file or file: cytogenomic_file)
          with p, sample_clinical_radiology_file_filter, collect(DISTINCT {
                      sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                      participant_age_at_collection: sm.participant_age_at_collection,
                      sample_tumor_status: sm.sample_tumor_status,
                      tumor_classification: sm.tumor_classification,
                      assay_method: CASE LABELS(file)[0]
                                              WHEN 'sequencing_file' THEN 'Sequencing'
                                              WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                              WHEN 'pathology_file' THEN 'Pathology imaging'
                                              WHEN 'methylation_array_file' THEN 'Methylation array'
                                              ELSE null END,
                      file_type: file.file_type,
                      library_selection: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN file.library_selection
                                    ELSE null END,
                      library_source_material: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN file.library_source_material
                                    ELSE null END,
                      library_source_molecule: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN file.library_source_molecule
                                    ELSE null END,
                      library_strategy: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN file.library_strategy
                                    ELSE null END
              }) as sample_sequencing_cytogenomic_pathology_methylation_file_filter
            with p, apoc.coll.union(sample_clinical_radiology_file_filter, sample_sequencing_cytogenomic_pathology_methylation_file_filter) as sample_file_filters
            optional match (p)<--(dg:diagnosis)
            with p, sample_file_filters, dg
            unwind sample_file_filters as sample_file_filter
            with p, collect(apoc.map.merge(sample_file_filter, {
                age_at_diagnosis: dg.age_at_diagnosis,
                diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                disease_phase: dg.disease_phase,
                diagnosis_classification_system: dg.diagnosis_classification_system,
                diagnosis_basis: dg.diagnosis_basis, 
                tumor_grade_source: dg.tumor_grade_source,
                tumor_stage_source: dg.tumor_stage_source,          
                diagnosis: dg.diagnosis
              })) as sample_diagnosis_file_filter
            optional match (p)<--(sm:sample)<--(dg:diagnosis)
            optional match (sm)<--(file)
            where (file: sequencing_file or file: methylation_array_file or file: pathology_file or file: cytogenomic_file)
            with p, sample_diagnosis_file_filter, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                    participant_age_at_collection: sm.participant_age_at_collection,
                    sample_tumor_status: sm.sample_tumor_status,
                    tumor_classification: sm.tumor_classification,
                    age_at_diagnosis: dg.age_at_diagnosis,
                    diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                    disease_phase: dg.disease_phase,
                    diagnosis_classification_system: dg.diagnosis_classification_system,
                    diagnosis_basis: dg.diagnosis_basis, 
                    tumor_grade_source: dg.tumor_grade_source,
                    tumor_stage_source: dg.tumor_stage_source,          
                    diagnosis: dg.diagnosis,
                    assay_method: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN 'Sequencing'
                                    WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                    WHEN 'pathology_file' THEN 'Pathology imaging'
                                    WHEN 'methylation_array_file' THEN 'Methylation array'
                                    ELSE null END,
                    file_type: file.file_type,
                    library_selection: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_selection
                              ELSE null END,
                    library_source_material: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN file.library_source_material
                                    ELSE null END,
                    library_source_molecule: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN file.library_source_molecule
                                    ELSE null END,
                    library_strategy: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_strategy
                              ELSE null END
                }) AS sample_diagnosis_filters_1
            with p, apoc.coll.union(sample_diagnosis_file_filter, sample_diagnosis_filters_1) as sample_diagnosis_file_filters
            optional match (p)<--(sm:sample)<--(dg:diagnosis)
            optional match (p)<--(file)
            where (file: clinical_measure_file or file: radiology_file)
            with p, sample_diagnosis_file_filters, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                    participant_age_at_collection: sm.participant_age_at_collection,
                    sample_tumor_status: sm.sample_tumor_status,
                    tumor_classification: sm.tumor_classification,
                    age_at_diagnosis: dg.age_at_diagnosis,
                    diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                    disease_phase: dg.disease_phase,
                    diagnosis_classification_system: dg.diagnosis_classification_system,
                    diagnosis_basis: dg.diagnosis_basis, 
                    tumor_grade_source: dg.tumor_grade_source,
                    tumor_stage_source: dg.tumor_stage_source,          
                    diagnosis: dg.diagnosis,
                    assay_method: CASE labels(file)[0] WHEN 'clinical_measure_file' THEN 'Clinical data'
                                        WHEN 'radiology_file' THEN 'Radiology imaging'
                                        ELSE null END,
                    file_type: file.file_type,
                    library_selection: null,
                    library_source_material: null,
                    library_source_molecule: null,
                    library_strategy: null
                }) AS sample_diagnosis_filters_2
            with p, apoc.coll.union(sample_diagnosis_file_filters, sample_diagnosis_filters_2) as sample_diagnosis_file_filter
          optional MATCH (p)<-[:of_sample]-(sm1:sample)<--(cl)<--(sm2:sample)
          WHERE (cl: cell_line or cl: pdx)
          optional Match (sm2)<--(file)
          WHERE (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          optional Match (sm1)<--(dg:diagnosis)
          with p, sample_diagnosis_file_filter, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm1.anatomic_site, ';'),
                    participant_age_at_collection: sm1.participant_age_at_collection,
                    sample_tumor_status: sm1.sample_tumor_status,
                    tumor_classification: sm1.tumor_classification,
                    age_at_diagnosis: dg.age_at_diagnosis,
                    diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                    disease_phase: dg.disease_phase,
                    diagnosis_classification_system: dg.diagnosis_classification_system,
                    diagnosis_basis: dg.diagnosis_basis, 
                    tumor_grade_source: dg.tumor_grade_source,
                    tumor_stage_source: dg.tumor_stage_source,          
                    diagnosis: dg.diagnosis,
                    assay_method: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN 'Sequencing'
                                    WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                    WHEN 'pathology_file' THEN 'Pathology imaging'
                                    WHEN 'methylation_array_file' THEN 'Methylation array'
                                    ELSE null END,
                    file_type: file.file_type,
                    library_selection: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_selection
                              ELSE null END,
                    library_source_material: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN file.library_source_material
                                    ELSE null END,
                    library_source_molecule: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN file.library_source_molecule
                                    ELSE null END,
                    library_strategy: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_strategy
                              ELSE null END
                }) AS sample_diagnosis_filters_1
            with p, apoc.coll.union(sample_diagnosis_file_filter, sample_diagnosis_filters_1) as sample_diagnosis_file_filters
          optional MATCH (p)<-[:of_sample]-(sm1:sample)<--(cl)<--(sm2:sample)
          WHERE (cl: cell_line or cl: pdx)
          optional Match (sm2)<--(file)
          WHERE (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          optional Match (sm2)<--(dg:diagnosis)
          with p, sample_diagnosis_file_filters, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm2.anatomic_site, ';'),
                    participant_age_at_collection: sm2.participant_age_at_collection,
                    sample_tumor_status: sm2.sample_tumor_status,
                    tumor_classification: sm2.tumor_classification,
                    age_at_diagnosis: dg.age_at_diagnosis,
                    diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                    disease_phase: dg.disease_phase,
                    diagnosis_classification_system: dg.diagnosis_classification_system,
                    diagnosis_basis: dg.diagnosis_basis, 
                    tumor_grade_source: dg.tumor_grade_source,
                    tumor_stage_source: dg.tumor_stage_source,          
                    diagnosis: dg.diagnosis,
                    assay_method: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN 'Sequencing'
                                    WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                    WHEN 'pathology_file' THEN 'Pathology imaging'
                                    WHEN 'methylation_array_file' THEN 'Methylation array'
                                    ELSE null END,
                    file_type: file.file_type,
                    library_selection: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_selection
                              ELSE null END,
                    library_source_material: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN file.library_source_material
                                    ELSE null END,
                    library_source_molecule: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN file.library_source_molecule
                                    ELSE null END,
                    library_strategy: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_strategy
                              ELSE null END
                }) AS sample_diagnosis_filters_2
            with p, apoc.coll.union(sample_diagnosis_file_filters, sample_diagnosis_filters_2) as sample_diagnosis_file_filter
          optional MATCH (p)<-[:of_sample]-(sm1:sample)<--(cl)<--(sm2:sample)
          WHERE (cl: cell_line or cl: pdx)
          optional Match (sm1)<--(dg:diagnosis)
          optional match (p)<--(file)
          where (file: clinical_measure_file or file: radiology_file)
          with p, sample_diagnosis_file_filter, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm1.anatomic_site, ';'),
                    participant_age_at_collection: sm1.participant_age_at_collection,
                    sample_tumor_status: sm1.sample_tumor_status,
                    tumor_classification: sm1.tumor_classification,
                    age_at_diagnosis: dg.age_at_diagnosis,
                    diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                    disease_phase: dg.disease_phase,
                    diagnosis_classification_system: dg.diagnosis_classification_system,
                    diagnosis_basis: dg.diagnosis_basis, 
                    tumor_grade_source: dg.tumor_grade_source,
                    tumor_stage_source: dg.tumor_stage_source,          
                    diagnosis: dg.diagnosis,
                    assay_method: CASE labels(file)[0] WHEN 'clinical_measure_file' THEN 'Clinical data'
                                        WHEN 'radiology_file' THEN 'Radiology imaging'
                                        ELSE null END,
                    file_type: file.file_type,
                    library_selection: null,
                    library_source_material: null,
                    library_source_molecule: null,
                    library_strategy: null
                }) AS sample_diagnosis_filters_3
            with p, apoc.coll.union(sample_diagnosis_file_filter, sample_diagnosis_filters_3) as sample_diagnosis_file_filters
          optional MATCH (p)<-[:of_sample]-(sm1:sample)<--(cl)<--(sm2:sample)
          WHERE (cl: cell_line or cl: pdx)
          optional Match (sm2)<--(dg:diagnosis)
          optional match (p)<--(file)
          where (file: clinical_measure_file or file: radiology_file)
          with p, sample_diagnosis_file_filters, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm2.anatomic_site, ';'),
                    participant_age_at_collection: sm2.participant_age_at_collection,
                    sample_tumor_status: sm2.sample_tumor_status,
                    tumor_classification: sm2.tumor_classification,
                    age_at_diagnosis: dg.age_at_diagnosis,
                    diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                    disease_phase: dg.disease_phase,
                    diagnosis_classification_system: dg.diagnosis_classification_system,
                    diagnosis_basis: dg.diagnosis_basis, 
                    tumor_grade_source: dg.tumor_grade_source,
                    tumor_stage_source: dg.tumor_stage_source,          
                    diagnosis: dg.diagnosis,
                    assay_method: CASE labels(file)[0] WHEN 'clinical_measure_file' THEN 'Clinical data'
                                        WHEN 'radiology_file' THEN 'Radiology imaging'
                                        ELSE null END,
                    file_type: file.file_type,
                    library_selection: null,
                    library_source_material: null,
                    library_source_molecule: null,
                    library_strategy: null
                }) AS sample_diagnosis_filters_4
            with p, apoc.coll.union(sample_diagnosis_file_filters, sample_diagnosis_filters_4) as sample_diagnosis_file_filter
            OPTIONAL MATCH (p)<-[*..4]-(file)
            WHERE (file:clinical_measure_file OR file: sequencing_file OR file:pathology_file OR file:radiology_file OR file:methylation_array_file OR file:cytogenomic_file)
            OPTIONAL MATCH (p)<-[:of_survival]-(su:survival)
            OPTIONAL MATCH (p)<-[:of_synonym]-(sy:synonym)
            OPTIONAL MATCH (st:study)<-[:of_participant]-(p)
            OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
            OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
            WITH p, sy, sample_diagnosis_file_filter, COLLECT(DISTINCT su.last_known_survival_status) as vital_status, file, st, stf, stp
            RETURN DISTINCT
              p.id as id,
              p.participant_id as participant_id,
              apoc.text.split(p.race, ';') as race,
              p.race as race_str,
              p.sex_at_birth as sex_at_birth,
              apoc.text.join(Collect(distinct sy.synonym_id), ',') as alternate_participant_id,
              case when 'Dead' in vital_status then ['Dead']
                    else vital_status end as last_known_survival_status,
              sample_diagnosis_file_filter AS sample_diagnosis_file_filters,
              st.study_id as study_id,
              st.dbgap_accession as dbgap_accession,
              st.study_acronym as study_acronym,
              st.study_name as study_name,
              COUNT(DISTINCT file.id) as file_count,
              COLLECT(DISTINCT file.id) as files

  - index_name: diagnosis
    type: neo4j
    mapping:
      id:
        type: keyword
      pid:
        type: keyword
      diagnosis_id:
        type: keyword
      participant_id:
        type: keyword
      sid:
        type: keyword
      sample_id:
        type: keyword
      diagnosis:
        type: keyword
      disease_phase:
        type: keyword
      diagnosis_classification_system:
        type: keyword
      diagnosis_basis:
        type: keyword
      tumor_grade_source:
        type: keyword  
      tumor_stage_source:
        type: keyword    
      diagnosis_anatomic_site:
        type: keyword
      diagnosis_anatomic_site_str:
        type: keyword
      age_at_diagnosis:
        type: integer
      race:
        type: keyword
      sex_at_birth:
        type: keyword
      dbgap_accession:
        type: keyword
      study_id:
        type: keyword
      study_acronym:
        type: keyword
      study_name:
        type: keyword
      last_known_survival_status:
        type: keyword
      sample_file_filters:
        type: nested
        properties:
          sample_anatomic_site:
            type: keyword
          participant_age_at_collection:
            type: integer
          sample_tumor_status:
            type: keyword
          tumor_classification:
            type: keyword
          assay_method:
            type: keyword
          file_type:
            type: keyword
          library_selection:
            type: keyword
          library_source_material:
            type: keyword
          library_source_molecule:
            type: keyword
          library_strategy:
            type: keyword
      file_count:
        type: integer
      files:
        type: text
        fields:
          keyword:
            type: keyword
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_queries:
      - query: |
          MATCH (p:participant)<--(dg:diagnosis)
          optional MATCH (p)<-[:of_sample]-(sm1:sample)<--(cl)<--(sm2:sample)
          WHERE (cl: cell_line or cl: pdx)
          optional Match (sm2)<--(file)
          WHERE (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file) 
          with p, case COLLECT(distinct sm1) when [] then []
                        else COLLECT(DISTINCT {
                                sample_anatomic_site: apoc.text.split(sm1.anatomic_site, ';'),
                                participant_age_at_collection: sm1.participant_age_at_collection,
                                sample_tumor_status: sm1.sample_tumor_status,
                                tumor_classification: sm1.tumor_classification,
                                assay_method: CASE LABELS(file)[0]
                                          WHEN 'sequencing_file' THEN 'Sequencing'
                                          WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                          WHEN 'pathology_file' THEN 'Pathology imaging'
                                          WHEN 'methylation_array_file' THEN 'Methylation array'
                                          ELSE null END,
                                file_type: CASE LABELS(file)[0]
                                          When null then null
                                          else file.file_type end,
                                library_selection: CASE LABELS(file)[0]
                                              WHEN 'sequencing_file' THEN file.library_selection
                                              ELSE null END,
                                library_source_material: CASE LABELS(file)[0]
                                            WHEN 'sequencing_file' THEN file.library_source_material
                                            ELSE null END,
                                library_source_molecule: CASE LABELS(file)[0]
                                            WHEN 'sequencing_file' THEN file.library_source_molecule
                                            ELSE null END,
                                library_strategy: CASE LABELS(file)[0]
                                              WHEN 'sequencing_file' THEN file.library_strategy
                                              ELSE null END
                            }) end AS sample1,
                            case COLLECT(distinct sm2) 
                            when [] then []
                            else COLLECT(DISTINCT {
                                sample_anatomic_site: apoc.text.split(sm2.anatomic_site, ';'),
                                participant_age_at_collection: sm2.participant_age_at_collection,
                                sample_tumor_status: sm2.sample_tumor_status,
                                tumor_classification: sm2.tumor_classification,
                                assay_method: CASE LABELS(file)[0]
                                          WHEN 'sequencing_file' THEN 'Sequencing'
                                          WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                          WHEN 'pathology_file' THEN 'Pathology imaging'
                                          WHEN 'methylation_array_file' THEN 'Methylation array'
                                          ELSE null END,
                                file_type: CASE LABELS(file)[0]
                                          When null then null
                                          else file.file_type end,
                                library_selection: CASE LABELS(file)[0]
                                              WHEN 'sequencing_file' THEN file.library_selection
                                              ELSE null END,
                                library_source_material: CASE LABELS(file)[0]
                                            WHEN 'sequencing_file' THEN file.library_source_material
                                            ELSE null END,
                                library_source_molecule: CASE LABELS(file)[0]
                                            WHEN 'sequencing_file' THEN file.library_source_molecule
                                            ELSE null END,
                                library_strategy: CASE LABELS(file)[0]
                                              WHEN 'sequencing_file' THEN file.library_strategy
                                              ELSE null END
                            }) end AS sample2
          with p, apoc.coll.union(sample1,sample2) as cell_line_pdx_file_filters
          OPTIONAL MATCH (p)<-[:of_sample]-(sm:sample)<--(file)
          WHERE (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          with p, cell_line_pdx_file_filters, COLLECT(DISTINCT {
                        sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                        participant_age_at_collection: sm.participant_age_at_collection,
                        sample_tumor_status: sm.sample_tumor_status,
                        tumor_classification: sm.tumor_classification,
                        assay_method: CASE LABELS(file)[0]
                                  WHEN 'sequencing_file' THEN 'Sequencing'
                                  WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                  WHEN 'pathology_file' THEN 'Pathology imaging'
                                  WHEN 'methylation_array_file' THEN 'Methylation array' 
                                  ELSE null END,
                        file_type: file.file_type,
                        library_selection: CASE LABELS(file)[0]
                                      WHEN 'sequencing_file' THEN file.library_selection
                                      ELSE null END,
                        library_source_material: CASE LABELS(file)[0]
                                            WHEN 'sequencing_file' THEN file.library_source_material
                                            ELSE null END,
                        library_source_molecule: CASE LABELS(file)[0]
                                            WHEN 'sequencing_file' THEN file.library_source_molecule
                                            ELSE null END,
                        library_strategy: CASE LABELS(file)[0]
                                      WHEN 'sequencing_file' THEN file.library_strategy
                                      ELSE null END
                    }) AS general_file_filters
          OPTIONAL Match (p)<-[:of_sample]-(sm:sample)
          OPTIONAL MATCH (p)<-[:of_clinical_measure_file]-(file1:clinical_measure_file)
          with p, cell_line_pdx_file_filters, general_file_filters,sm, COLLECT(DISTINCT file1.file_type) as file1_types
          UNWIND (case file1_types when [] then [null] else file1_types end)  AS types_1
          with p, cell_line_pdx_file_filters, general_file_filters, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                    participant_age_at_collection: sm.participant_age_at_collection,
                    sample_tumor_status: sm.sample_tumor_status,
                    tumor_classification: sm.tumor_classification,
                    assay_method: CASE types_1 when null then null else 'Clinical data' end,
                    file_type: types_1,
                    library_selection: null,
                    library_source_material: null,
                    library_source_molecule: null,
                    library_strategy: null
            }) as participant_clinical_measure_file_filters
          OPTIONAL Match (p)<-[:of_sample]-(sm:sample)
          OPTIONAL MATCH (p)<-[:of_radiology_file]-(file1:radiology_file)
          with p, cell_line_pdx_file_filters, general_file_filters, participant_clinical_measure_file_filters, sm, COLLECT(DISTINCT file1.file_type) as file1_types
          UNWIND (case file1_types when [] then [null] else file1_types end)  AS types_1
          with p, cell_line_pdx_file_filters, general_file_filters, participant_clinical_measure_file_filters, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                    participant_age_at_collection: sm.participant_age_at_collection,
                    sample_tumor_status: sm.sample_tumor_status,
                    tumor_classification: sm.tumor_classification,
                    assay_method: CASE types_1 when null then null else 'Radiology imaging' end,
                    file_type: types_1,
                    library_selection: null,
                    library_source_material: null,
                    library_source_molecule: null,
                    library_strategy: null
            }) as participant_radiology_file_filters
          MATCH (dg:diagnosis)
          MATCH (p)<-[:of_diagnosis]-(dg)
          with dg, p, cell_line_pdx_file_filters, general_file_filters, participant_clinical_measure_file_filters, participant_radiology_file_filters
          SKIP $skip LIMIT $limit
          OPTIONAL MATCH (p)<-[*..4]-(file)
          WHERE (file:clinical_measure_file OR file: sequencing_file OR file:pathology_file OR file:radiology_file OR file:methylation_array_file OR file:cytogenomic_file)
          OPTIONAL MATCH (p)<-[:of_survival]-(su:survival)
          with p, cell_line_pdx_file_filters, general_file_filters, participant_clinical_measure_file_filters,participant_radiology_file_filters, dg, file, su
          OPTIONAL MATCH (st:study)<-[:of_participant]-(p)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          WITH p, cell_line_pdx_file_filters, general_file_filters, participant_clinical_measure_file_filters,participant_radiology_file_filters, file, COLLECT(DISTINCT su.last_known_survival_status) as vital_status, st, stf, stp, dg
          RETURN DISTINCT
            dg.id as id,
            p.id as pid,
            null as sid,
            null as sample_id,
            dg.diagnosis_id as diagnosis_id,
            dg.diagnosis as diagnosis,
            dg.disease_phase as disease_phase,
            dg.diagnosis_classification_system as diagnosis_classification_system,
            dg.diagnosis_basis as diagnosis_basis,
            dg.tumor_grade_source as tumor_grade_source,
            dg.tumor_stage_source as tumor_stage_source,
            apoc.text.split(dg.anatomic_site, ';') as diagnosis_anatomic_site,
            dg.anatomic_site as diagnosis_anatomic_site_str,
            dg.age_at_diagnosis as age_at_diagnosis,
            p.participant_id as participant_id,
            apoc.text.split(p.race, ';') as race,
            p.sex_at_birth as sex_at_birth,
            st.study_id as study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name,
            case when 'Dead' in vital_status then ['Dead']
                  else vital_status end as last_known_survival_status,       
            apoc.coll.union(cell_line_pdx_file_filters, general_file_filters) + participant_clinical_measure_file_filters + participant_radiology_file_filters AS sample_file_filters,
            COUNT(DISTINCT file.id) as file_count,
            COLLECT(DISTINCT file.id) as files
        page_size: 500
      - query: |
          match (p:participant)<--(sm:sample)<--(dg:diagnosis)
          optional match (sm)<-[*..3]-(file)
          where (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          with dg, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                    participant_age_at_collection: sm.participant_age_at_collection,
                    sample_tumor_status: sm.sample_tumor_status,
                    tumor_classification: sm.tumor_classification,
                    assay_method: CASE LABELS(file)[0]
                                  WHEN 'sequencing_file' THEN 'Sequencing'
                                  WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                  WHEN 'pathology_file' THEN 'Pathology imaging'
                                  WHEN 'methylation_array_file' THEN 'Methylation array'
                                  ELSE null END,
                    file_type: file.file_type,
                    library_selection: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_selection
                              ELSE null END,
                    library_source_material: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_source_material
                              ELSE null END,
                    library_source_molecule: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_source_molecule
                              ELSE null END,
                    library_strategy: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_strategy
                              ELSE null END
            }) as sample_file_filter_1
          match (p:participant)<--(sm1:sample)<--(dg)
          optional match (sm1)<--(cl)<--(sm:sample)
          where (cl: cell_line or cl: pdx)
          optional match (sm)<--(file)
          where (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          with dg, sample_file_filter_1, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                    participant_age_at_collection: sm.participant_age_at_collection,
                    sample_tumor_status: sm.sample_tumor_status,
                    tumor_classification: sm.tumor_classification,
                    assay_method: CASE LABELS(file)[0]
                                  WHEN 'sequencing_file' THEN 'Sequencing'
                                  WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                  WHEN 'pathology_file' THEN 'Pathology imaging'
                                  WHEN 'methylation_array_file' THEN 'Methylation array'
                                  ELSE null END,
                    file_type: file.file_type,
                    library_selection: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_selection
                              ELSE null END,
                    library_source_material: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_source_material
                              ELSE null END,
                    library_source_molecule: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_source_molecule
                              ELSE null END,
                    library_strategy: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_strategy
                              ELSE null END
            }) as sample_file_filter_2
          with dg, apoc.coll.union(sample_file_filter_1, sample_file_filter_2) as sample_file_filter
          match (p:participant)<--(sm:sample)<--(dg)
          optional match (sm)<--(file)
          where (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          OPTIONAL MATCH (p)<-[:of_survival]-(su:survival)
          OPTIONAL MATCH (st:study)<-[:of_participant]-(p)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          WITH dg, p, sm, sample_file_filter, file, COLLECT(DISTINCT su.last_known_survival_status) as vital_status, st, stf, stp
          RETURN DISTINCT
            dg.id as id,
            p.id as pid,
            sm.id as sid,
            sm.sample_id as sample_id,
            dg.diagnosis_id as diagnosis_id,
            dg.diagnosis as diagnosis,
            dg.disease_phase as disease_phase,
            dg.diagnosis_classification_system as diagnosis_classification_system,
            dg.diagnosis_basis as diagnosis_basis,
            dg.tumor_grade_source as tumor_grade_source,
            dg.tumor_stage_source as tumor_stage_source,
            apoc.text.split(dg.anatomic_site, ';') as diagnosis_anatomic_site,
            dg.anatomic_site as diagnosis_anatomic_site_str,
            dg.age_at_diagnosis as age_at_diagnosis,
            p.participant_id as participant_id,
            apoc.text.split(p.race, ';') as race,
            p.sex_at_birth as sex_at_birth,
            st.study_id as study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name,
            case when 'Dead' in vital_status then ['Dead']
                  else vital_status end as last_known_survival_status,       
            sample_file_filter AS sample_file_filters,
            COUNT(DISTINCT file.id) as file_count,
            COLLECT(DISTINCT file.id) as files
      - query: |
          MATCH (p:participant)<-[:of_sample]-(sm1:sample)<--(cl)<--(sm2:sample)<--(dg:diagnosis)
          WHERE (cl: cell_line or cl: pdx)
          optional Match (sm1)<--(file1)
          WHERE (file1: sequencing_file OR file1:pathology_file OR file1:methylation_array_file OR file1:cytogenomic_file)
          optional Match (sm2)<--(file2)
          WHERE (file2: sequencing_file OR file2:pathology_file OR file2:methylation_array_file OR file2:cytogenomic_file)
          with dg, collect(distinct sm1) as sm1_list, collect(distinct sm2) as sm2_list, collect(distinct file1) as file1_list, collect(distinct file2) as file2_list
          with dg, apoc.coll.union(sm1_list, sm2_list) as samples, apoc.coll.union(file1_list, file2_list) as files
          unwind samples as sample
          with dg, sample, files
          UNWIND (case files when [] then [null] else files end)  AS file
          with dg, sample, file
          with dg, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sample.anatomic_site, ';'),
                    participant_age_at_collection: sample.participant_age_at_collection,
                    sample_tumor_status: sample.sample_tumor_status,
                    tumor_classification: sample.tumor_classification,
                    assay_method: CASE LABELS(file)[0]
                                  WHEN 'sequencing_file' THEN 'Sequencing'
                                  WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                  WHEN 'pathology_file' THEN 'Pathology imaging'
                                  WHEN 'methylation_array_file' THEN 'Methylation array'
                                  ELSE null END,
                    file_type: file.file_type,
                    library_selection: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_selection
                              ELSE null END,
                    library_source_material: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_source_material
                              ELSE null END,
                    library_source_molecule: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_source_molecule
                              ELSE null END,
                    library_strategy: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_strategy
                              ELSE null END
            }) as sample_file_filter
          optional match (p:participant)<-[:of_sample]-(sm1:sample)<--(cl)<--(sm:sample)<--(dg)
          WHERE (cl: cell_line or cl: pdx)
          optional match (sm)<--(file)
          WHERE (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          with dg, sample_file_filter, collect(distinct file.id) as files, apoc.coll.union(collect(distinct sm1.id), collect(distinct sm.id)) as sid, apoc.coll.union(collect(distinct sm1.sample_id), collect(distinct sm.sample_id))  as sample_id
          optional match (p:participant)<-[*..4]-(dg)
          OPTIONAL MATCH (p)<-[:of_survival]-(su:survival)
          OPTIONAL MATCH (st:study)<-[:of_participant]-(p)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          WITH dg, p, sid, sample_id, sample_file_filter, files, COLLECT(DISTINCT su.last_known_survival_status) as vital_status, st, stf, stp
          RETURN DISTINCT
            dg.id as id,
            p.id as pid,
            sid as sid,
            sample_id as sample_id,
            dg.diagnosis_id as diagnosis_id,
            dg.diagnosis as diagnosis,
            dg.disease_phase as disease_phase,
            dg.diagnosis_classification_system as diagnosis_classification_system,
            dg.diagnosis_basis as diagnosis_basis,
            dg.tumor_grade_source as tumor_grade_source,
            dg.tumor_stage_source as tumor_stage_source,
            apoc.text.split(dg.anatomic_site, ';') as diagnosis_anatomic_site,
            dg.anatomic_site as diagnosis_anatomic_site_str,
            dg.age_at_diagnosis as age_at_diagnosis,
            p.participant_id as participant_id,
            apoc.text.split(p.race, ';') as race,
            p.sex_at_birth as sex_at_birth,
            st.study_id as study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name,
            case when 'Dead' in vital_status then ['Dead']
                  else vital_status end as last_known_survival_status,       
            sample_file_filter AS sample_file_filters,
            size(files) as file_count,
            files as files
      - query: |
          match (st:study)<--(cl)<--(sm:sample)<--(dg:diagnosis)
          where (cl: cell_line or cl: pdx)
          optional match (sm)<--(file)
          where (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          with dg, COLLECT(DISTINCT {
                    sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                    participant_age_at_collection: sm.participant_age_at_collection,
                    sample_tumor_status: sm.sample_tumor_status,
                    tumor_classification: sm.tumor_classification,
                    assay_method: CASE LABELS(file)[0]
                                  WHEN 'sequencing_file' THEN 'Sequencing'
                                  WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                  WHEN 'pathology_file' THEN 'Pathology imaging'
                                  WHEN 'methylation_array_file' THEN 'Methylation array'
                                  ELSE null END,
                    file_type: file.file_type,
                    library_selection: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_selection
                              ELSE null END,
                    library_source_material: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_source_material
                              ELSE null END,
                    library_source_molecule: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_source_molecule
                              ELSE null END,
                    library_strategy: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_strategy
                              ELSE null END
            }) as sample_file_filter
          optional match (st:study)<--(cl)<--(sm:sample)<--(dg)
          where (cl: cell_line or cl: pdx)
          optional match (sm)<--(file)
          where (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          WITH dg, sm, sample_file_filter, file, st, stf, stp
          RETURN DISTINCT
            dg.id as id,
            null as pid,
            sm.id as sid,
            sm.sample_id as sample_id,
            dg.diagnosis_id as diagnosis_id,
            dg.diagnosis as diagnosis,
            dg.disease_phase as disease_phase,
            dg.diagnosis_classification_system as diagnosis_classification_system,
            dg.diagnosis_basis as diagnosis_basis,
            dg.tumor_grade_source as tumor_grade_source,
            dg.tumor_stage_source as tumor_stage_source,
            apoc.text.split(dg.anatomic_site, ';') as diagnosis_anatomic_site,
            dg.anatomic_site as diagnosis_anatomic_site_str,
            dg.age_at_diagnosis as age_at_diagnosis,
            null as participant_id,
            null as race,
            null as sex_at_birth,
            st.study_id as study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name,
            null as last_known_survival_status,       
            sample_file_filter AS sample_file_filters,
            COUNT(DISTINCT file.id) as file_count,
            COLLECT(DISTINCT file.id) as files

  - index_name: studies
    type: neo4j
    mapping:
      id:
        type: keyword
      study_id:
        type: keyword
      grant_id:
        type: keyword
      pubmed_ids:
        type: keyword
      dbgap_accession:
        type: keyword
      study_name:
        type: keyword
      study_acronym:
        type: keyword
      PIs:
        type: keyword
      num_of_participants:
        type: integer
      diagnosis_cancer:
        type: text
        fields:
          keyword:
            type: keyword
      diagnosis_anatomic_site:
        type: text
        fields:
          keyword:
            type: keyword
      file_types:
        type: text
        fields:
          keyword:
            type: keyword
      num_of_samples:
        type: integer
      num_of_files:
        type: integer
      files:
        type: text
        fields:
          keyword:
            type: keyword
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_queries:
      - query: |
          MATCH (st:study)<-[:of_participant]-(p:participant)
          with st, count(p) as num_p
          MATCH (st:study)<-[*..5]-(dg:diagnosis)
          with st, num_p, dg.diagnosis as dg_cancers, count(dg.diagnosis) as num_cancers
          ORDER BY num_cancers desc
          with st, num_p, collect(dg_cancers + ' (' + toString(num_cancers) + ')') as cancers
          MATCH (st)<-[*..5]-(diag:diagnosis)
          with st, num_p, cancers, apoc.text.split(diag.anatomic_site, ';') as dg_sites
          unwind dg_sites as dg_site
          with st, num_p, cancers, dg_site
          with st, num_p, cancers, dg_site, count(dg_site) as num_sites
          ORDER BY num_sites desc
          with st, num_p, cancers, collect(dg_site + ' (' + toString(num_sites) + ')') as sites
          MATCH (st)<-[*..5]-(fl)
          WHERE (fl:clinical_measure_file OR fl: sequencing_file OR fl:pathology_file OR fl:radiology_file OR fl:methylation_array_file OR fl:cytogenomic_file)
          with st, num_p, cancers, sites, fl.file_type as ft, count(fl.file_type) as num_ft
          ORDER BY num_ft desc
          with st, num_p, cancers, sites, collect(ft + ' (' + toString(num_ft) + ')') as file_types, sum(num_ft) as num_files
          OPTIONAL MATCH (st)<-[:of_participant|of_cell_line|of_pdx]-(pcp)<-[:of_sample]-(sm1:sample)
          WHERE (pcp:participant or pcp:cell_line or pcp:pdx)
          WITH st, num_p, cancers, sites, file_types, num_files, count(distinct sm1.sample_id) as num_samples_1
          OPTIONAL MATCH (st)<-[:of_participant]-(participant)<-[:of_sample]-(sm1:sample)<--(cp)<--(sm2:sample)
          WHERE (cp:cell_line or cp:pdx)
          WITH st, num_p, cancers, sites, file_types, num_files, num_samples_1, count(distinct sm2.sample_id) as num_samples_2
          WITH st, num_p, cancers, sites, file_types, num_files, num_samples_1 + num_samples_2 as num_samples
          MATCH (st)<-[*..5]-(file)
          WHERE (file:clinical_measure_file OR file: sequencing_file OR file:pathology_file OR file:radiology_file OR file:methylation_array_file OR file:cytogenomic_file)
          OPTIONAL MATCH (st)<-[:of_publication]-(pub:publication)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          WHERE stp.personnel_type = 'PI'
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          WITH st, num_p, cancers, sites, file_types, num_files, num_samples, file.id as file_id, stf, stp, pub
          RETURN DISTINCT
            st.id as id,
            st.study_id as study_id,
            apoc.text.join(COLLECT(DISTINCT stf.grant_id), ';') as grant_id,
            apoc.text.join(COLLECT(DISTINCT pub.pubmed_id), ';') as pubmed_ids,
            st.dbgap_accession as dbgap_accession,
            st.study_name as study_name,
            st.study_acronym as study_acronym,
            apoc.text.join(COLLECT(DISTINCT stp.personnel_name), ';') as PIs,
            num_p as num_of_participants,
            cancers as diagnosis_cancer,
            sites as diagnosis_anatomic_site,
            file_types as file_types,
            num_samples as num_of_samples,
            num_files as num_of_files,
            COLLECT(DISTINCT file_id) as files

  - index_name: samples
    type: neo4j
    mapping:
      id:
        type: keyword
      pid:
        type: keyword
      sample_id:
        type: keyword
      participant_id:
        type: keyword
      race:
        type: keyword
      sex_at_birth:
        type: keyword
      sample_anatomic_site:
        type: keyword
      sample_anatomic_site_str:
        type: keyword     
      participant_age_at_collection:
        type: integer
      sample_tumor_status:
        type: keyword
      tumor_classification:
        type: keyword
      study_id:
        type: keyword
      dbgap_accession:
        type: keyword
      study_acronym:
        type: keyword
      study_name:
        type: keyword
      diagnosis_filters:
        type: nested
        properties:
          age_at_diagnosis:
            type: integer
          diagnosis_anatomic_site:
            type: keyword
          disease_phase:
            type: keyword
          diagnosis_classification_system:
            type: keyword
          diagnosis_basis:
            type: keyword
          tumor_grade_source:
            type: keyword  
          tumor_stage_source:
            type: keyword    
          diagnosis:
            type: keyword
      file_filters:
        type: nested
        properties:
          assay_method:
            type: keyword
          file_type:
            type: keyword
          library_selection:
            type: keyword
          library_source_material:
            type: keyword
          library_source_molecule:
            type: keyword
          library_strategy:
            type: keyword
      last_known_survival_status:
        type: keyword
      file_count:
        type: integer
      direct_file_count:
        type: integer
      files:
        type: text
        fields:
          keyword:
            type: keyword
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_queries:
      - query: |
          MATCH (sm:sample)
          MATCH (p:participant)<-[*..3]-(sm)
          with sm, p
          SKIP $skip LIMIT $limit
          optional match (p)<--(dg:diagnosis)
          with sm, COLLECT(DISTINCT {
                age_at_diagnosis: dg.age_at_diagnosis,
                diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                disease_phase: dg.disease_phase,
                diagnosis_classification_system: dg.diagnosis_classification_system,
                diagnosis_basis: dg.diagnosis_basis,
                tumor_grade_source: dg.tumor_grade_source,
                tumor_stage_source: dg.tumor_stage_source,
                diagnosis: dg.diagnosis
            }) AS diagnosis_filter_1
          MATCH (p:participant)<-[*..3]-(sm)
          optional match (sm)<-[*..3]-(dg:diagnosis)
          with sm, diagnosis_filter_1, COLLECT(DISTINCT {
                age_at_diagnosis: dg.age_at_diagnosis,
                diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                disease_phase: dg.disease_phase,
                diagnosis_classification_system: dg.diagnosis_classification_system,
                diagnosis_basis: dg.diagnosis_basis,
                tumor_grade_source: dg.tumor_grade_source,
                tumor_stage_source: dg.tumor_stage_source,
                diagnosis: dg.diagnosis
            }) AS diagnosis_filter_2
          with sm, apoc.coll.union(diagnosis_filter_1, diagnosis_filter_2) as diagnosis_filter
          optional match (sm)<-[*..3]-(file)
          WHERE (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          with sm, diagnosis_filter, COLLECT(DISTINCT {
                assay_method: CASE LABELS(file)[0]
                          WHEN 'sequencing_file' THEN 'Sequencing'
                          WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                          WHEN 'pathology_file' THEN 'Pathology imaging'
                          WHEN 'methylation_array_file' THEN 'Methylation array' 
                          ELSE null END,
                file_type: file.file_type,
                library_selection: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_selection
                              ELSE null END,
                library_source_material: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_source_material
                              ELSE null END,
                library_source_molecule: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_source_molecule
                              ELSE null END,
                library_strategy: CASE LABELS(file)[0]
                              WHEN 'sequencing_file' THEN file.library_strategy
                              ELSE null END
            }) AS file_filter
          MATCH (p:participant)<-[*..3]-(sm)
          MATCH (st:study)<-[:of_participant]-(p)
          optional match (sm)<-[*..3]-(file)
          WHERE (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          optional match (sm)<--(direct_file)
          WHERE (direct_file: sequencing_file OR direct_file:pathology_file OR direct_file:methylation_array_file OR direct_file:cytogenomic_file)
          OPTIONAL MATCH (p)<-[:of_survival]-(su:survival)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          WITH sm, diagnosis_filter, file_filter, file, direct_file, COLLECT(DISTINCT su.last_known_survival_status) as vital_status, p, st, stf, stp
          RETURN DISTINCT
            sm.id as id,
            p.id as pid,
            sm.sample_id as sample_id,
            p.participant_id as participant_id,
            apoc.text.split(p.race, ';') as race,
            p.sex_at_birth as sex_at_birth,
            apoc.text.split(sm.anatomic_site, ';') as sample_anatomic_site,
            sm.anatomic_site as sample_anatomic_site_str,
            sm.participant_age_at_collection as participant_age_at_collection,
            sm.sample_tumor_status as sample_tumor_status,
            sm.tumor_classification as tumor_classification,
            st.study_id as study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name,
            diagnosis_filter AS diagnosis_filters,
            case when 'Dead' in vital_status then ['Dead']
                  else vital_status end as last_known_survival_status,
            file_filter AS file_filters,
            COUNT(DISTINCT file.id) as file_count,
            COUNT(DISTINCT direct_file.id) as direct_file_count,
            COLLECT(DISTINCT file.id) as files
        page_size: 500
      - query: |
          MATCH (sm:sample)
          MATCH (st:study)<-[:of_cell_line|of_pdx]-(cl)<--(sm)
          Where (cl:cell_line or cl:pdx)
          optional Match (sm)<--(file)
          WHERE (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          OPTIONAL MATCH (sm)<-[:of_diagnosis]-(dg:diagnosis)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          WITH sm, file, st, stf, stp, dg
          RETURN DISTINCT
            sm.id as id,
            null as pid,
            sm.sample_id as sample_id,
            null as participant_id,
            null as race,
            null as sex_at_birth,
            apoc.text.split(sm.anatomic_site, ';') as sample_anatomic_site,
            sm.anatomic_site as sample_anatomic_site_str,
            sm.participant_age_at_collection as participant_age_at_collection,
            sm.sample_tumor_status as sample_tumor_status,
            sm.tumor_classification as tumor_classification,
            st.study_id as study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name,
            COLLECT(DISTINCT {
                age_at_diagnosis: dg.age_at_diagnosis,
                diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                disease_phase: dg.disease_phase,
                diagnosis_classification_system: dg.diagnosis_classification_system,
                diagnosis_basis: dg.diagnosis_basis,
                tumor_grade_source: dg.tumor_grade_source,
                tumor_stage_source: dg.tumor_stage_source,
                diagnosis: dg.diagnosis
            }) AS diagnosis_filters,
            null as last_known_survival_status,
            CASE COLLECT(file) WHEN [] THEN []
                      ELSE COLLECT(DISTINCT {
                          assay_method: CASE LABELS(file)[0]
                                    WHEN 'sequencing_file' THEN 'Sequencing'
                                    WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                    WHEN 'pathology_file' THEN 'Pathology imaging'
                                    WHEN 'methylation_array_file' THEN 'Methylation array' 
                                    ELSE null END,
                          file_type: file.file_type,
                          library_selection: CASE LABELS(file)[0]
                                        WHEN 'sequencing_file' THEN file.library_selection
                                        ELSE null END,
                          library_source_material: CASE LABELS(file)[0]
                                        WHEN 'sequencing_file' THEN file.library_source_material
                                        ELSE null END,
                          library_source_molecule: CASE LABELS(file)[0]
                                        WHEN 'sequencing_file' THEN file.library_source_molecule
                                        ELSE null END,
                          library_strategy: CASE LABELS(file)[0]
                                        WHEN 'sequencing_file' THEN file.library_strategy
                                        ELSE null END
                      }) END AS file_filters,
            COUNT(DISTINCT file.id) as file_count,
            COUNT(DISTINCT file.id) as direct_file_count,
            COLLECT(DISTINCT file.id) as files

  - index_name: files
    type: neo4j
    mapping:
      id:
        type: keyword
      pid:
        type: keyword
      file_id:
        type: keyword
      guid:
        type: keyword
      file_name:
        type: keyword
      file_category:
        type: keyword
      file_type:
        type: keyword
      file_description:
        type: keyword
      file_size:
        type: long
      md5sum:
        type: keyword
      study_id:
        type: keyword
      dbgap_accession:
        type: keyword
      study_acronym:
        type: keyword
      study_name:
        type: keyword
      participant_id:
        type: keyword
      sample_id:
        type: keyword
      files:
        type: text
        fields:
          keyword:
            type: keyword
      combined_filters:
        type: nested
        properties:
          participant_id:
            type: keyword
          race:
            type: keyword
          sex_at_birth:
            type: keyword
          sample_diagnosis_filters:
            type: nested
            properties:
              sample_anatomic_site:
                type: keyword
              participant_age_at_collection:
                type: integer
              sample_tumor_status:
                type: keyword
              tumor_classification:
                type: keyword
              age_at_diagnosis:
                type: integer
              diagnosis_anatomic_site:
                type: keyword
              disease_phase:
                type: keyword
              diagnosis_classification_system:
                type: keyword
              diagnosis_basis:
                type: keyword
              tumor_grade_source:
                type: keyword  
              tumor_stage_source:
                type: keyword   
              diagnosis:
                type: keyword
          last_known_survival_status:
            type: keyword
      participant_filters:
        type: nested
        properties:
          race:
            type: keyword
          sex_at_birth:
            type: keyword
      sample_diagnosis_filters:
        type: nested
        properties:
          sample_anatomic_site:
            type: keyword
          participant_age_at_collection:
            type: integer
          sample_tumor_status:
            type: keyword
          tumor_classification:
            type: keyword
          age_at_diagnosis:
            type: integer
          diagnosis_anatomic_site:
            type: keyword
          disease_phase:
            type: keyword
          diagnosis_classification_system:
            type: keyword
          diagnosis_basis:
            type: keyword
          tumor_grade_source:
            type: keyword  
          tumor_stage_source:
            type: keyword   
          diagnosis:
            type: keyword
      last_known_survival_status:
        type: keyword
      library_selection:
        type: keyword
        fields:
          sort:
            type: keyword
            normalizer: lowercase
      library_source_material:
        type: keyword
        fields:
          sort:
            type: keyword
            normalizer: lowercase
      library_source_molecule:
        type: keyword
        fields:
          sort:
            type: keyword
            normalizer: lowercase
      library_strategy:
        type: keyword
        fields:
          sort:
            type: keyword
            normalizer: lowercase
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_queries:
      - query: |
          MATCH (file)
          where (file:clinical_measure_file or file:radiology_file)
          MATCH (p:participant)<--(file)
          optional MATCH (p)<-[*0..3]-(sm:sample)
          OPTIONAL MATCH (p)<-[:of_diagnosis]-(dg:diagnosis)
          with file, COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                        participant_age_at_collection: sm.participant_age_at_collection,
                                        sample_tumor_status: sm.sample_tumor_status,
                                        tumor_classification: sm.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    }) AS sample_diagnosis_filter_1
          MATCH (p:participant)<--(file)
          optional MATCH (p)<-[:of_sample]-(sm:sample)
          OPTIONAL MATCH (sm)<--(dg:diagnosis)
          with file, sample_diagnosis_filter_1, COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                        participant_age_at_collection: sm.participant_age_at_collection,
                                        sample_tumor_status: sm.sample_tumor_status,
                                        tumor_classification: sm.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    }) AS sample_diagnosis_filter_2
          with file, apoc.coll.union(sample_diagnosis_filter_1, sample_diagnosis_filter_2) as sample_diagnosis_filter_3
          MATCH (p:participant)<--(file)
          optional MATCH (p)<-[:of_sample]-(sm1:sample)<-[*2..2]-(sm:sample)
          OPTIONAL MATCH (sm1)<--(dg:diagnosis)
          with file, sample_diagnosis_filter_3, COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                        participant_age_at_collection: sm.participant_age_at_collection,
                                        sample_tumor_status: sm.sample_tumor_status,
                                        tumor_classification: sm.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    }) AS sample_diagnosis_filter_4
          with file, apoc.coll.union(sample_diagnosis_filter_3, sample_diagnosis_filter_4) as sample_diagnosis_filter_5
          MATCH (p:participant)<--(file)
          optional MATCH (p)<-[:of_sample]-(sm1:sample)<-[*2..2]-(sm:sample)
          OPTIONAL MATCH (sm)<--(dg:diagnosis)
          with file, sample_diagnosis_filter_5, apoc.coll.union(COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm1.anatomic_site, ';'),
                                        participant_age_at_collection: sm1.participant_age_at_collection,
                                        sample_tumor_status: sm1.sample_tumor_status,
                                        tumor_classification: sm1.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    }), COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                        participant_age_at_collection: sm.participant_age_at_collection,
                                        sample_tumor_status: sm.sample_tumor_status,
                                        tumor_classification: sm.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    })) AS sample_diagnosis_filter_6
          with file, apoc.coll.union(sample_diagnosis_filter_5, sample_diagnosis_filter_6) as sample_diagnosis_filter
          MATCH (p:participant)<--(file)
          MATCH (st:study)<-[:of_participant]-(p)
          OPTIONAL MATCH (st)<-[:of_publication]-(pub:publication)
          OPTIONAL MATCH (p)<-[:of_survival]-(su:survival)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          RETURN DISTINCT
            file.id as id,
            p.id as pid,
            CASE LABELS(file)[0]
                  WHEN 'clinical_measure_file' THEN file.clinical_measure_file_id
                  WHEN 'radiology_file' THEN file.radiology_file_id
                  ELSE null END AS file_id,
            file.dcf_indexd_guid AS guid,
            file.file_name AS file_name,
            CASE labels(file)[0] WHEN 'clinical_measure_file' THEN 'Clinical data'
                                      WHEN 'radiology_file' THEN 'Radiology imaging'
                                      ELSE null END AS file_category,
            file.file_type AS file_type,
            file.file_description AS file_description,
            file.file_size AS file_size,
            file.md5sum AS md5sum,
            st.study_id AS study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name,
            p.participant_id AS participant_id,
            null AS sample_id,
            COLLECT(DISTINCT file.id) as files,
            null as combined_filters,
            COLLECT(DISTINCT {
              race: apoc.text.split(p.race, ';'),
              sex_at_birth: p.sex_at_birth
            }) AS participant_filters,
            sample_diagnosis_filter AS sample_diagnosis_filters,
            case when 'Dead' in COLLECT(DISTINCT su.last_known_survival_status) then ['Dead']
                  else COLLECT(DISTINCT su.last_known_survival_status) end as last_known_survival_status,     
            null AS library_selection,
            null AS library_source_material,
            null AS library_source_molecule,
            null AS library_strategy
      - query: |
          MATCH (st:study)<-[:of_clinical_measure_file]-(file:clinical_measure_file)
          OPTIONAL MATCH (st)<-[:of_participant]-(p)
          optional MATCH (p)<-[*0..3]-(sm:sample)
          OPTIONAL MATCH (p)<-[:of_diagnosis]-(dg:diagnosis)
          with file, p, COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                        participant_age_at_collection: sm.participant_age_at_collection,
                                        sample_tumor_status: sm.sample_tumor_status,
                                        tumor_classification: sm.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    }) AS sample_diagnosis_filter_1
          match (st:study)<--(p)
          match (st)<--(file)
          optional MATCH (p)<-[:of_sample]-(sm:sample)
          OPTIONAL MATCH (sm)<--(dg:diagnosis)
          with file, p, sample_diagnosis_filter_1, COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                        participant_age_at_collection: sm.participant_age_at_collection,
                                        sample_tumor_status: sm.sample_tumor_status,
                                        tumor_classification: sm.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    }) AS sample_diagnosis_filter_2
          with file, p, apoc.coll.union(sample_diagnosis_filter_1, sample_diagnosis_filter_2) as sample_diagnosis_filter_3
          match (st:study)<--(p)
          match (st)<--(file)
          optional MATCH (p)<-[:of_sample]-(sm1:sample)<-[*2..2]-(sm:sample)
          OPTIONAL MATCH (sm1)<--(dg:diagnosis)
          with file, p, sample_diagnosis_filter_3, COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                        participant_age_at_collection: sm.participant_age_at_collection,
                                        sample_tumor_status: sm.sample_tumor_status,
                                        tumor_classification: sm.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    }) AS sample_diagnosis_filter_4
          with file, p, apoc.coll.union(sample_diagnosis_filter_3, sample_diagnosis_filter_4) as sample_diagnosis_filter_5
          MATCH (st:study)<-[:of_clinical_measure_file]-(file)
          OPTIONAL MATCH (st)<-[:of_participant]-(p)
          optional MATCH (p)<-[:of_sample]-(sm1:sample)<-[*2..2]-(sm:sample)
          OPTIONAL MATCH (sm)<--(dg:diagnosis)
          OPTIONAL MATCH (p)<-[:of_survival]-(su:survival)
          with file, p, sample_diagnosis_filter_5, apoc.coll.union(COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm1.anatomic_site, ';'),
                                        participant_age_at_collection: sm1.participant_age_at_collection,
                                        sample_tumor_status: sm1.sample_tumor_status,
                                        tumor_classification: sm1.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    }), COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                        participant_age_at_collection: sm.participant_age_at_collection,
                                        sample_tumor_status: sm.sample_tumor_status,
                                        tumor_classification: sm.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    })) AS sample_diagnosis_filter_6, COLLECT(DISTINCT su.last_known_survival_status) as vital_status
          with file, p, apoc.coll.union(sample_diagnosis_filter_5, sample_diagnosis_filter_6) as sample_diagnosis_filter, vital_status
          with file, collect(DISTINCT {
                participant_id: p.participant_id,
                race: apoc.text.split(p.race, ';'),
                sex_at_birth: p.sex_at_birth,
                sample_diagnosis_filters: sample_diagnosis_filter,
                last_known_survival_status: case when 'Dead' in vital_status then ['Dead']
                  else vital_status end
            }) as combined_filter_1
          MATCH (st:study)<-[:of_clinical_measure_file]-(file)
          OPTIONAL MATCH (st)<--(cl)<--(sm:sample)
          where (cl: cell_line or cl: pdx)
          OPTIONAL MATCH (sm)<--(dg:diagnosis)
          with file, combined_filter_1, COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                        participant_age_at_collection: sm.participant_age_at_collection,
                                        sample_tumor_status: sm.sample_tumor_status,
                                        tumor_classification: sm.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    }) as sample_diagnosis_filter
          with file, combined_filter_1, collect({
                participant_id: null,
                race: null,
                sex_at_birth: null,
                sample_diagnosis_filters: sample_diagnosis_filter,
                last_known_survival_status: null
          }) as combined_filter_2
          with file, apoc.coll.union(combined_filter_1, combined_filter_2) as combined_filter
          MATCH (st:study)<-[:of_clinical_measure_file]-(file)
          OPTIONAL MATCH (st)<-[:of_publication]-(pub:publication)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          With file, st, combined_filter, stf, stp
          RETURN DISTINCT
            file.id as id,
            null as pid,
            file.clinical_measure_file_id AS file_id,
            file.dcf_indexd_guid AS guid,
            file.file_name AS file_name,
            'Clinical data' AS file_category,
            file.file_type AS file_type,
            file.file_description AS file_description,
            file.file_size AS file_size,
            file.md5sum AS md5sum,
            st.study_id AS study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name,
            null AS participant_id,
            null AS sample_id,
            COLLECT(DISTINCT file.id) as files,
            combined_filter as combined_filters,
            null as participant_filters,
            null as sample_diagnosis_filters,
            null as last_known_survival_status,
            null AS library_selection,
            null AS library_source_material,
            null AS library_source_molecule,
            null AS library_strategy
      - query: |
          MATCH (file)
          where (file: sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          MATCH (p:participant)<-[*..3]-(sm:sample)<--(file)
          with file, sm, p
          SKIP $skip LIMIT $limit
          OPTIONAL MATCH (p)<-[:of_diagnosis]-(dg:diagnosis)
          with file, COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                        participant_age_at_collection: sm.participant_age_at_collection,
                                        sample_tumor_status: sm.sample_tumor_status,
                                        tumor_classification: sm.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    }) AS sample_diagnosis_filter_1
          optional MATCH (p:participant)<-[:of_sample]-(sm:sample)<--(file)
          OPTIONAL MATCH (sm)<--(dg:diagnosis)
          with file, sample_diagnosis_filter_1, COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                        participant_age_at_collection: sm.participant_age_at_collection,
                                        sample_tumor_status: sm.sample_tumor_status,
                                        tumor_classification: sm.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    }) AS sample_diagnosis_filter_2
          with file, apoc.coll.union(sample_diagnosis_filter_1, sample_diagnosis_filter_2) as sample_diagnosis_filter_3
          optional MATCH (p:participant)<-[:of_sample]-(sm1:sample)<-[*2..2]-(sm:sample)<--(file)
          OPTIONAL MATCH (sm1)<--(dg:diagnosis)
          with file, sample_diagnosis_filter_3, apoc.coll.union(COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm1.anatomic_site, ';'),
                                        participant_age_at_collection: sm1.participant_age_at_collection,
                                        sample_tumor_status: sm1.sample_tumor_status,
                                        tumor_classification: sm1.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    }), COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                        participant_age_at_collection: sm.participant_age_at_collection,
                                        sample_tumor_status: sm.sample_tumor_status,
                                        tumor_classification: sm.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    })) AS sample_diagnosis_filter_4
          with file, apoc.coll.union(sample_diagnosis_filter_3, sample_diagnosis_filter_4) as sample_diagnosis_filter_5
          optional MATCH (p:participant)<-[:of_sample]-(sm1:sample)<-[*2..2]-(sm:sample)<--(file)
          OPTIONAL MATCH (sm)<--(dg:diagnosis)
          with file, sample_diagnosis_filter_5, apoc.coll.union(COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm1.anatomic_site, ';'),
                                        participant_age_at_collection: sm1.participant_age_at_collection,
                                        sample_tumor_status: sm1.sample_tumor_status,
                                        tumor_classification: sm1.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    }), COLLECT(DISTINCT {
                                        sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                        participant_age_at_collection: sm.participant_age_at_collection,
                                        sample_tumor_status: sm.sample_tumor_status,
                                        tumor_classification: sm.tumor_classification,
                                        age_at_diagnosis: dg.age_at_diagnosis,
                                        diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                        disease_phase: dg.disease_phase,
                                        diagnosis_classification_system: dg.diagnosis_classification_system,
                                        diagnosis_basis: dg.diagnosis_basis,
                                        tumor_grade_source: dg.tumor_grade_source,
                                        tumor_stage_source: dg.tumor_stage_source,
                                        diagnosis: dg.diagnosis
                                    })) AS sample_diagnosis_filter_6
          with file, apoc.coll.union(sample_diagnosis_filter_5, sample_diagnosis_filter_6) as sample_diagnosis_filter
          MATCH (p:participant)<-[:of_sample]-(sm1:sample)<-[*0..2]-(sm:sample)<--(file)
          MATCH (st:study)<-[:of_participant]-(p)
          OPTIONAL MATCH (st)<-[:of_publication]-(pub:publication)
          OPTIONAL MATCH (p)<-[:of_survival]-(su:survival)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          with file, p, sample_diagnosis_filter, sm1, sm, st, COLLECT(DISTINCT su.last_known_survival_status) as vital_status, stf, stp
          RETURN DISTINCT
            file.id as id,
            p.id as pid,
            CASE LABELS(file)[0]
                  WHEN 'sequencing_file' THEN file.sequencing_file_id
                  WHEN 'cytogenomic_file' THEN file.cytogenomic_file_id
                  WHEN 'pathology_file' THEN file.pathology_file_id
                  WHEN 'methylation_array_file' THEN file.methylation_array_file_id ELSE null END AS file_id,
            file.dcf_indexd_guid AS guid,
            file.file_name AS file_name,
            CASE LABELS(file)[0] WHEN 'sequencing_file' THEN 'Sequencing'
                                    WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                                    WHEN 'pathology_file' THEN 'Pathology imaging'
                                    WHEN 'methylation_array_file' THEN 'Methylation array' 
                                    ELSE null END AS file_category,
            file.file_type AS file_type,
            file.file_description AS file_description,
            file.file_size AS file_size,
            file.md5sum AS md5sum,
            st.study_id AS study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name,
            p.participant_id AS participant_id,
            CASE sm1.sample_id WHEN sm.sample_id THEN sm.sample_id
                      ELSE sm1.sample_id + ',' + sm.sample_id END AS sample_id,
            COLLECT(DISTINCT file.id) as files,
            null as combined_filters,
            COLLECT(DISTINCT {
                race: apoc.text.split(p.race, ';'),
                sex_at_birth: p.sex_at_birth
            }) AS participant_filters,
            sample_diagnosis_filter AS sample_diagnosis_filters,
            case when 'Dead' in vital_status then ['Dead']
                  else vital_status end as last_known_survival_status,
            CASE LABELS(file)[0] WHEN 'sequencing_file' THEN file.library_selection
                                        ELSE null END AS library_selection,
            CASE LABELS(file)[0] WHEN 'sequencing_file' THEN file.library_source_material
                                        ELSE null END AS library_source_material,
            CASE LABELS(file)[0] WHEN 'sequencing_file' THEN file.library_source_molecule
                                        ELSE null END AS library_source_molecule,
            CASE LABELS(file)[0] WHEN 'sequencing_file' THEN file.library_strategy
                                        ELSE null END AS library_strategy
        page_size: 10000
      - query: |
          MATCH (file)
          WHERE (file:sequencing_file OR file:pathology_file OR file:methylation_array_file OR file:cytogenomic_file)
          MATCH (st:study)<-[:of_cell_line|of_pdx]-(cl)<--(sm:sample)
          Where (cl: cell_line or cl: pdx)
          MATCH (sm)<--(file)
          optional match (sm)<--(dg:diagnosis)
          OPTIONAL MATCH (st)<-[:of_publication]-(pub:publication)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          with file, sm, st, dg, stf, stp
          RETURN DISTINCT
            file.id as id,
            null as pid,
            CASE LABELS(file)[0]
                  WHEN 'sequencing_file' THEN file.sequencing_file_id
                  WHEN 'cytogenomic_file' THEN file.cytogenomic_file_id
                  WHEN 'pathology_file' THEN file.pathology_file_id
                  WHEN 'methylation_array_file' THEN file.methylation_array_file_id ELSE null END AS file_id,
            file.dcf_indexd_guid AS guid,
            file.file_name AS file_name,
            CASE LABELS(file)[0]
                  WHEN 'sequencing_file' THEN 'Sequencing'
                  WHEN 'cytogenomic_file' THEN 'Cytogenomic'
                  WHEN 'pathology_file' THEN 'Pathology imaging'
                  WHEN 'methylation_array_file' THEN 'Methylation array' ELSE null END AS file_category,
            file.file_type AS file_type,
            file.file_description AS file_description,
            file.file_size AS file_size,
            file.md5sum AS md5sum,
            st.study_id AS study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name,
            null AS participant_id,
            sm.sample_id AS sample_id,
            COLLECT(DISTINCT file.id) as files,
            null as combined_filters,
            null AS participant_filters,
            COLLECT(DISTINCT {
                sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                participant_age_at_collection: sm.participant_age_at_collection,
                sample_tumor_status: sm.sample_tumor_status,
                tumor_classification: sm.tumor_classification,
                age_at_diagnosis: dg.age_at_diagnosis,
                diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                disease_phase: dg.disease_phase,
                diagnosis_classification_system: dg.diagnosis_classification_system,
                diagnosis_basis: dg.diagnosis_basis,
                tumor_grade_source: dg.tumor_grade_source,
                tumor_stage_source: dg.tumor_stage_source,
                diagnosis: dg.diagnosis
            }) AS sample_diagnosis_filters, 
            null as last_known_survival_status,
            CASE LABELS(file)[0]
                      WHEN 'sequencing_file' THEN file.library_selection
                      ELSE null END AS library_selection,
            CASE LABELS(file)[0] WHEN 'sequencing_file' THEN file.library_source_material
                                        ELSE null END AS library_source_material,
            CASE LABELS(file)[0] WHEN 'sequencing_file' THEN file.library_source_molecule
                                        ELSE null END AS library_source_molecule,
            CASE LABELS(file)[0]
                      WHEN 'sequencing_file' THEN file.library_strategy
                      ELSE null END AS library_strategy
      - query: |
          MATCH (st:study)<--(p:participant)<--(sm1:sample)<-[*2..2]-(sm:sample)
          where not ((sm)<--(:sequencing_file)) and not ((sm)<--(:cytogenomic_file)) and not ((sm)<--(:pathology_file)) and not ((sm)<--(:methylation_array_file)) and not ((p)<--(:radiology_file)) and not ((p)<--(:clinical_measure_file))
          OPTIONAL MATCH (p)<-[:of_diagnosis]-(dg:diagnosis)
          with p, sm1, sm, apoc.coll.union(COLLECT(DISTINCT {
                                sample_anatomic_site: apoc.text.split(sm1.anatomic_site, ';'),
                                participant_age_at_collection: sm1.participant_age_at_collection,
                                sample_tumor_status: sm1.sample_tumor_status,
                                tumor_classification: sm1.tumor_classification,
                                age_at_diagnosis: dg.age_at_diagnosis,
                                diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                disease_phase: dg.disease_phase,
                                diagnosis_classification_system: dg.diagnosis_classification_system,
                                diagnosis_basis: dg.diagnosis_basis,
                                tumor_grade_source: dg.tumor_grade_source,
                                tumor_stage_source: dg.tumor_stage_source,
                                diagnosis: dg.diagnosis
                            }), COLLECT(DISTINCT {
                                sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                participant_age_at_collection: sm.participant_age_at_collection,
                                sample_tumor_status: sm.sample_tumor_status,
                                tumor_classification: sm.tumor_classification,
                                age_at_diagnosis: dg.age_at_diagnosis,
                                diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                disease_phase: dg.disease_phase,
                                diagnosis_classification_system: dg.diagnosis_classification_system,
                                diagnosis_basis: dg.diagnosis_basis,
                                tumor_grade_source: dg.tumor_grade_source,
                                tumor_stage_source: dg.tumor_stage_source,
                                diagnosis: dg.diagnosis
                            })) as sample_diagnosis_filter_1
          MATCH (st:study)<--(p)<--(sm1)<-[*2..2]-(sm)
          where not ((sm)<--(:sequencing_file)) and not ((sm)<--(:cytogenomic_file)) and not ((sm)<--(:pathology_file)) and not ((sm)<--(:methylation_array_file)) and not ((p)<--(:radiology_file)) and not ((p)<--(:clinical_measure_file))
          OPTIONAL MATCH (sm1)<--(dg:diagnosis)
          with p, sm1, sm, sample_diagnosis_filter_1, apoc.coll.union(COLLECT(DISTINCT {
                                sample_anatomic_site: apoc.text.split(sm1.anatomic_site, ';'),
                                participant_age_at_collection: sm1.participant_age_at_collection,
                                sample_tumor_status: sm1.sample_tumor_status,
                                tumor_classification: sm1.tumor_classification,
                                age_at_diagnosis: dg.age_at_diagnosis,
                                diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                disease_phase: dg.disease_phase,
                                diagnosis_classification_system: dg.diagnosis_classification_system,
                                diagnosis_basis: dg.diagnosis_basis,
                                tumor_grade_source: dg.tumor_grade_source,
                                tumor_stage_source: dg.tumor_stage_source,
                                diagnosis: dg.diagnosis
                            }), COLLECT(DISTINCT {
                                sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                participant_age_at_collection: sm.participant_age_at_collection,
                                sample_tumor_status: sm.sample_tumor_status,
                                tumor_classification: sm.tumor_classification,
                                age_at_diagnosis: dg.age_at_diagnosis,
                                diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                disease_phase: dg.disease_phase,
                                diagnosis_classification_system: dg.diagnosis_classification_system,
                                diagnosis_basis: dg.diagnosis_basis,
                                tumor_grade_source: dg.tumor_grade_source,
                                tumor_stage_source: dg.tumor_stage_source,
                                diagnosis: dg.diagnosis
                            })) AS sample_diagnosis_filter_2
          with p, sm1, sm, apoc.coll.union(sample_diagnosis_filter_1, sample_diagnosis_filter_2) as sample_diagnosis_filter_3
          MATCH (st:study)<--(p)<--(sm1)<-[*2..2]-(sm)
          where not ((sm)<--(:sequencing_file)) and not ((sm)<--(:cytogenomic_file)) and not ((sm)<--(:pathology_file)) and not ((sm)<--(:methylation_array_file)) and not ((p)<--(:radiology_file)) and not ((p)<--(:clinical_measure_file))
          OPTIONAL MATCH (sm)<--(dg:diagnosis)
          with p, sm1, sm, sample_diagnosis_filter_3, apoc.coll.union(COLLECT(DISTINCT {
                                sample_anatomic_site: apoc.text.split(sm1.anatomic_site, ';'),
                                participant_age_at_collection: sm1.participant_age_at_collection,
                                sample_tumor_status: sm1.sample_tumor_status,
                                tumor_classification: sm1.tumor_classification,
                                age_at_diagnosis: dg.age_at_diagnosis,
                                diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                disease_phase: dg.disease_phase,
                                diagnosis_classification_system: dg.diagnosis_classification_system,
                                diagnosis_basis: dg.diagnosis_basis,
                                tumor_grade_source: dg.tumor_grade_source,
                                tumor_stage_source: dg.tumor_stage_source,
                                diagnosis: dg.diagnosis
                            }), COLLECT(DISTINCT {
                                sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                                participant_age_at_collection: sm.participant_age_at_collection,
                                sample_tumor_status: sm.sample_tumor_status,
                                tumor_classification: sm.tumor_classification,
                                age_at_diagnosis: dg.age_at_diagnosis,
                                diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                                disease_phase: dg.disease_phase,
                                diagnosis_classification_system: dg.diagnosis_classification_system,
                                diagnosis_basis: dg.diagnosis_basis,
                                tumor_grade_source: dg.tumor_grade_source,
                                tumor_stage_source: dg.tumor_stage_source,
                                diagnosis: dg.diagnosis
                            })) AS sample_diagnosis_filter_4
          with p, sm1, sm, apoc.coll.union(sample_diagnosis_filter_3, sample_diagnosis_filter_4) as sample_diagnosis_filter
          MATCH (st:study)<--(p)<--(sm1)<-[*2..2]-(sm)
          OPTIONAL MATCH (p)<-[:of_survival]-(su:survival)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          with distinct p, sm, st, sample_diagnosis_filter, COLLECT(DISTINCT su.last_known_survival_status) as vital_status, stf, stp
          RETURN DISTINCT
            null as id,
            p.id as pid,
            null AS file_id,
            null AS guid,
            null AS file_name,
            null AS file_category,
            null AS file_type,
            null AS file_description,
            null AS file_size,
            null AS md5sum,
            st.study_id AS study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name,
            p.participant_id AS participant_id,
            sm.sample_id AS sample_id,
            null as files,
            null as combined_filters,
            COLLECT(DISTINCT {
                race: apoc.text.split(p.race, ';'),
                sex_at_birth: p.sex_at_birth
            }) AS participant_filters,
            case when 'Dead' in vital_status then ['Dead']
                  else vital_status end as last_known_survival_status,         
            sample_diagnosis_filter AS sample_diagnosis_filters,
            null AS library_selection,
            null AS library_source_material,
            null AS library_source_molecule,
            null AS library_strategy
      - query: |
          MATCH (st:study)<--(p:participant)<--(sm:sample)
          where not ((sm)<-[*..3]-(:sequencing_file)) and not ((sm)<-[*..3]-(:cytogenomic_file)) and not ((sm)<-[*..3]-(:pathology_file)) and not ((sm)<-[*..3]-(:methylation_array_file)) and not ((p)<--(:radiology_file)) and not ((p)<--(:clinical_measure_file))
          OPTIONAL MATCH (p)<-[*..2]-(dg:diagnosis)
          OPTIONAL MATCH (p)<-[:of_survival]-(su:survival)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          with sm, p, st, dg, COLLECT(DISTINCT su.last_known_survival_status) as vital_status, stf, stp
          RETURN DISTINCT
            null as id,
            p.id as pid,
            null AS file_id,
            null AS guid,
            null AS file_name,
            null AS file_category,
            null AS file_type,
            null AS file_description,
            null AS file_size,
            null AS md5sum,
            st.study_id AS study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name,
            p.participant_id AS participant_id,
            sm.sample_id AS sample_id,
            null as files,
            null as combined_filters,
            COLLECT(DISTINCT {
                race: apoc.text.split(p.race, ';'),
                sex_at_birth: p.sex_at_birth
            }) AS participant_filters,
            COLLECT(DISTINCT {
                sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                participant_age_at_collection: sm.participant_age_at_collection,
                sample_tumor_status: sm.sample_tumor_status,
                tumor_classification: sm.tumor_classification,
                age_at_diagnosis: dg.age_at_diagnosis,
                diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                disease_phase: dg.disease_phase,
                diagnosis_classification_system: dg.diagnosis_classification_system,
                diagnosis_basis: dg.diagnosis_basis,
                tumor_grade_source: dg.tumor_grade_source,
                tumor_stage_source: dg.tumor_stage_source,
                diagnosis: dg.diagnosis
            }) AS sample_diagnosis_filters,
            case when 'Dead' in vital_status then ['Dead']
                  else vital_status end as last_known_survival_status,
            null AS library_selection,
            null AS library_source_material,
            null AS library_source_molecule,
            null AS library_strategy
      - query: |
          MATCH (st:study)<--(cl)<--(sm:sample)
          Where (cl: cell_line or cl: pdx) and not ((sm)<--(:sequencing_file)) and not ((sm)<--(:cytogenomic_file)) and not ((sm)<--(:pathology_file)) and not ((sm)<--(:methylation_array_file))
          optional match (sm)<--(dg:diagnosis)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          with sm, dg, st, stf, stp
          RETURN DISTINCT
            null as id,
            null as pid,
            null AS file_id,
            null AS guid,
            null AS file_name,
            null AS file_category,
            null AS file_type,
            null AS file_description,
            null AS file_size,
            null AS md5sum,
            st.study_id AS study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name,
            null AS participant_id,
            sm.sample_id AS sample_id,
            null as files,
            null as combined_filters,
            null AS participant_filters,
            null as last_known_survival_status,
            COLLECT(DISTINCT {
                sample_anatomic_site: apoc.text.split(sm.anatomic_site, ';'),
                participant_age_at_collection: sm.participant_age_at_collection,
                sample_tumor_status: sm.sample_tumor_status,
                tumor_classification: sm.tumor_classification,
                age_at_diagnosis: null,
                diagnosis_anatomic_site: null,
                disease_phase: null,
                diagnosis_classification_system: null,
                diagnosis_basis: null,
                tumor_grade_source: null,
                tumor_stage_source: null,
                diagnosis_classification: null
            }) AS sample_diagnosis_filters,
            null AS library_selection,
            null AS library_source_material,
            null AS library_source_molecule,
            null AS library_strategy
      - query: |
          MATCH (st:study)<--(p:participant)
          where not ((p)<--(:sample)) and not ((p)<--(:radiology_file)) and not ((p)<--(:clinical_measure_file))
          OPTIONAL MATCH (p)<-[:of_diagnosis]-(dg:diagnosis)
          OPTIONAL MATCH (p)<-[:of_survival]-(su:survival)
          OPTIONAL MATCH (st)<-[:of_study_personnel]-(stp:study_personnel)
          OPTIONAL MATCH (st)<-[:of_study_funding]-(stf:study_funding)
          with p, st, dg, COLLECT(DISTINCT su.last_known_survival_status) as vital_status, stf, stp
          RETURN DISTINCT
            null as id,
            p.id as pid,
            null AS file_id,
            null AS guid,
            null AS file_name,
            null AS file_category,
            null AS file_type,
            null AS file_description,
            null AS file_size,
            null AS md5sum,
            st.study_id AS study_id,
            st.dbgap_accession as dbgap_accession,
            st.study_acronym as study_acronym,
            st.study_name as study_name,
            p.participant_id AS participant_id,
            null AS sample_id,
            null as files,
            null as combined_filters,
            COLLECT(DISTINCT {
                race: apoc.text.split(p.race, ';'),
                sex_at_birth: p.sex_at_birth
            }) AS participant_filters,
            COLLECT(DISTINCT {
                sample_anatomic_site: null,
                participant_age_at_collection: null,
                sample_tumor_status: null,
                tumor_classification: null,
                age_at_diagnosis: dg.age_at_diagnosis,
                diagnosis_anatomic_site: apoc.text.split(dg.anatomic_site, ';'),
                disease_phase: dg.disease_phase,
                diagnosis_classification_system: dg.diagnosis_classification_system,
                diagnosis_basis: dg.diagnosis_basis,
                tumor_grade_source: dg.tumor_grade_source,
                tumor_stage_source: dg.tumor_stage_source,
                diagnosis_classification: dg.diagnosis_classification
            }) AS sample_diagnosis_filters, 
            case when 'Dead' in vital_status then ['Dead']
                  else vital_status end as last_known_survival_status,
            null AS library_selection,
            null AS library_source_material,
            null AS library_source_molecule,
            null AS library_strategy
